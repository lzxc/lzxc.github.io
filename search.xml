<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端性能优化-preload、prefetch和defer、async</title>
      <link href="/2021/05/26/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-preload%E3%80%81prefetch%E5%92%8Cdefer%E3%80%81async/"/>
      <url>/2021/05/26/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-preload%E3%80%81prefetch%E5%92%8Cdefer%E3%80%81async/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/preload&prefetch.png" alt="avatar"></p><blockquote><p>前端性能优化-preload、prefetch和defer、async</p></blockquote><a id="more"></a><h1 id="preload"><a href="#preload" class="headerlink" title="preload"></a>preload</h1><p>表示用户十分有可能需要在当前浏览中加载目标资源，所以浏览器必须预先获取和缓存对应资源且更不易阻塞页面的初步渲染进而提升性能<br>它可以通过 <strong>Link</strong> 标签进行创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- as属性在下面讲解 --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;preload&quot; href&#x3D;&quot;&#x2F;path&#x2F;to&#x2F;style.css&quot; as&#x3D;&quot;style&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- HTTP 响应头模式 --&gt;</span><br><span class="line">Link: &lt;https:&#x2F;&#x2F;example.com&#x2F;other&#x2F;styles.css&gt;; rel&#x3D;preload; as&#x3D;style</span><br></pre></td></tr></table></figure><p>这种方式比通过 <strong>Link</strong> 方式加载资源方式更快，请求在返回还没到解析页面的时候就已经开始预加载资源了</p><h2 id="preload兼容性"><a href="#preload兼容性" class="headerlink" title="preload兼容性"></a>preload兼容性</h2><p><img src="/images/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/preload%E5%85%BC%E5%AE%B9%E6%80%A7.jpg" alt="preload兼容性"></p><h1 id="prefetch"><a href="#prefetch" class="headerlink" title="prefetch"></a>prefetch</h1><p>它的作用是告诉浏览器未来可能会使用到的某个资源，浏览器就会在闲时去加载对应的资源，若能预测到用户的行为，比如懒加载，点击到其它页面等则相当于提前预加载了需要的资源。<br>它同样可以通过 <strong>Link</strong> 标签进行创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- as属性在下面讲解 --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;prefetch&quot; href&#x3D;&quot;&#x2F;images&#x2F;big.jpeg&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- HTTP 响应头模式 --&gt;</span><br><span class="line">Link: &lt;https:&#x2F;&#x2F;example.com&#x2F;other&#x2F;styles.css&gt;; rel&#x3D;prefetch; as&#x3D;style</span><br></pre></td></tr></table></figure><h2 id="prefetch兼容性"><a href="#prefetch兼容性" class="headerlink" title="prefetch兼容性"></a>prefetch兼容性</h2><p><img src="/images/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/prefetch%E5%85%BC%E5%AE%B9%E6%80%A7.jpg" alt="prefetch兼容性"></p><h1 id="link标签上的as属性与加载的优先级"><a href="#link标签上的as属性与加载的优先级" class="headerlink" title="link标签上的as属性与加载的优先级"></a>link标签上的as属性与加载的优先级</h1><p>一个资源的加载的优先级被分为五个级别，分别是:</p><ul><li>Highest 最高</li><li>High 高</li><li>Medium 中等</li><li>Low 低</li><li>Lowest 最低</li></ul><ol><li>HTML/CSS 资源，其优先级是最高的</li><li>font 字体资源，优先级分别为 Highest/High</li><li>图片资源，如果出现在视口中，则优先级为 High，否则为 Low<br>而 script 脚本资源就比较特殊，优先级不一，脚本根据它们在文件中的位置是否异步、延迟或阻塞获得不同的优先级：</li></ol><ul><li>网络在第一个图片资源之前阻塞的脚本在网络优先级中是 High</li><li>网络在第一个图片资源之后阻塞的脚本在网络优先级中是 Medium</li><li>异步/延迟/插入的脚本（无论在什么位置）在网络优先级中是 Low</li></ul><p>自己网站资源优先级也可以通过 Chrome 控制台 Network 一栏进行查看.</p><ol><li>对于使用 prefetch 获取资源，其优先级默认为最低，Lowest，可以认为当浏览器空闲的时候才会去获取的资源。</li><li>而对于 preload 获取资源，可以通过 “as” 或者 “type” 属性来标识他们请求资源的优先级（比如说 preload 使用 as=”style” 属性将获得最高的优先级，即使资源不是样式文件)</li><li>没有 “as” 属性的将被看作异步请求。</li></ol><h1 id="async-defer"><a href="#async-defer" class="headerlink" title="async/defer"></a>async/defer</h1><p><img src="/images/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/async&defer.png" alt="async&amp;defer"></p><blockquote><p>async与defer是针对 <strong>script</strong> 标签而言的,他是 <strong>script</strong> 标签上的html属性</p></blockquote><p><strong>async</strong>: 对于普通脚本，如果存在 async 属性，那么普通脚本会被并行请求，并尽快解析和执行。</p><p><strong>defer</strong>: 这个布尔属性被设定用来通知浏览器该脚本将在文档完成解析后，触发 <strong>DOMContentLoaded</strong> 事件前执行。有 defer 属性的脚本会阻止 <strong>DOMContentLoaded</strong> 事件，直到脚本被加载并且解析完成</p><blockquote><p>使用 <strong>async/defer</strong> 属性在加载脚本的时候不阻塞 <strong>HTML</strong> 的解析，<strong>defer</strong> 加载脚本执行会在所有元素解析完成，<strong>DOMContentLoaded</strong> 事件触发之前完成执行。它的用途其实跟 <strong>preload</strong> 十分相似。你可以使用 <strong>defer</strong> 加载脚本在 <strong>head</strong> 末尾，这比将脚本放在 <strong>body</strong> 底部效果来的更好.</p></blockquote><ol><li>它相比于 preload 加载的优势在于浏览器兼容性好，从 caniuse 上看基本上所有浏览器都支持，覆盖率达到 93%，</li><li>不足之处在于：defer 只作用于脚本文件，对于样式、图片等资源就无能为力了，并且 defer 加载的资源是要执行的，而 preload 只下载资源并不执行，待真正使用到才会执行文件。</li><li>对于页面上主/首屏脚本，可以直接使用 defer 加载，而对于非首屏脚本/其它资源，可以采用 preload/prefeth 来进行加载</li></ol><h1 id="实际使用案例"><a href="#实际使用案例" class="headerlink" title="实际使用案例"></a>实际使用案例</h1><ol><li>提前加载字体文件。由于字体文件必须等到 <strong>CSSOM</strong> 构建完成并且作用到页面元素了才会开始加载，会导致页面字体样式闪动。所以要用 <strong>preload</strong> 显式告诉浏览器提前加载。假如字体文件在 <strong>CSS</strong> 生效之前下载完成，则可以完全消灭页面闪动效果。</li><li>使用 <strong>preload</strong> 预加载第二屏的内容，在网页开发中，对于非首屏部分采用懒加载是我们页面常用的优化手段，所以我们在页面 onload 之后可以通过 <strong>preload</strong> 来加载次屏所需要的资源，在用户浏览完首屏内容滚动时能够更快地看到次屏的内容。</li><li>在页面加载完成之后，可以分析页面上所有的链接，判断用户可能会点击的页面，分析提取下一跳页面上所有的资源使用 <strong>prefetch</strong> 进行加载(这里不使用 <strong>preload</strong>，因为不一定会点击)，浏览器会在空闲地时候进行加载，当用户点击链接命中了缓存，这可以有效地提升下一页面的首屏渲染时间。</li><li>对于商品列表页面，在用户鼠标停留在某个商品的时候，可以去分析商品详情页所需要的资源并提前开启 <strong>preload</strong> 加载，跟第 3 点类似，都是用来预测用户的行为并且做出一些预加载的手段，区别在于当用户停留在商品上时，点击命中率更高，<strong>preload</strong> 可以立即加载资源，有效提升缓存命中率。</li></ol><p>参考链接:</p><ul><li><a href="https://zhuanlan.zhihu.com/p/48521680" target="_blank" rel="noopener">使用 Preload/Prefetch 优化你的应用</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/orphaned/Web/HTML/Preloading_content" target="_blank" rel="noopener">通过rel=”preload”进行内容预加载</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ#what_are_the_prefetching_hints.3f" target="_blank" rel="noopener">什么是链接预取</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最简实现Promise</title>
      <link href="/2021/02/22/%E6%9C%80%E7%AE%80%E5%AE%9E%E7%8E%B0Promise/"/>
      <url>/2021/02/22/%E6%9C%80%E7%AE%80%E5%AE%9E%E7%8E%B0Promise/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/javascript/promise.jpg" alt="avatar"></p><blockquote><p>最简实现 <strong><code>Promise</code></strong></p></blockquote><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function Promise(fn) &#123;</span><br><span class="line">  this.cbs &#x3D; []</span><br><span class="line"></span><br><span class="line">  const resolve &#x3D; (value) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeOut(()&#x3D;&gt;&#123;</span><br><span class="line">      this.data &#x3D; value</span><br><span class="line">      this.cbs.forEach((cb) &#x3D;&gt; cb(value))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(resolve)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise.prototype.then &#x3D; function(onResolved) &#123;</span><br><span class="line">  return new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">    this.cbs.push(()&#x3D;&gt;&#123;</span><br><span class="line">      const res &#x3D; onResolved(this.data)</span><br><span class="line">      if(res instanceof Promise)&#123;</span><br><span class="line">        res.then(resolve)</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        resolve(resolve)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先上使用例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">new Promise((resolve,reject) &#x3D;&gt; &#123;</span><br><span class="line">  setTime(() &#x3D;&gt; &#123;</span><br><span class="line">    resolve(1)</span><br><span class="line">  &#125;,1000)</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; then1</span><br><span class="line">.then(res &#x3D;&gt; &#123;</span><br><span class="line">    return new Promise((resolve,reject) &#x3D;&gt; &#123;</span><br><span class="line">      setTimeOut(() &#x3D;&gt; &#123;</span><br><span class="line">        resolve(2)</span><br><span class="line">      &#125;, 2000)</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; then2</span><br><span class="line">    .then(res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首先分析Promise构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 此处fn为new Promise传入的函数</span><br><span class="line">function Promise(fn) &#123;</span><br><span class="line">  &#x2F;&#x2F; 在实例上挂载Promise resolve时的回调函数集</span><br><span class="line">  this.cbs &#x3D; []</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 传递给Promise处理函数的resolve，相当于是原生Promise中入参处理函数中，取到的第一个参数resolve</span><br><span class="line">  &#x2F;&#x2F; 在实例上挂载处理函数的结果，并执行一遍回调函数集</span><br><span class="line">  const resolve &#x3D; (value) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeOut(() &#x3D;&gt; &#123;</span><br><span class="line">      this.data &#x3D; value</span><br><span class="line">      this.cbs.forEach((cb) &#x3D;&gt; cb(value))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 执行用户传入的函数 </span><br><span class="line">  &#x2F;&#x2F; 并且把resolve方法交给用户执行</span><br><span class="line">  fn(resolve)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Promise最重要的是链式调用，重点在then的实现方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Promise.prototype.then &#x3D; function(onResolved) &#123;</span><br><span class="line">  &#x2F;&#x2F; 此处this指向上面的构造函数作用域</span><br><span class="line">  return new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 每一个then，都会往this.cbs推入一个执行栈，等待后续执行</span><br><span class="line">    this.cbs.push(() &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; 此处的onResolved为then内部的入参，res为执行结果</span><br><span class="line">      const res &#x3D; onResolved(this.data)</span><br><span class="line">      &#x2F;&#x2F; 如果res执行结果依旧为Promise的原型链上，即内部return new Promise，则继续将resolve传递入下一个then </span><br><span class="line">      if(res instanceof Promise) &#123;</span><br><span class="line">        res.then(resolve)</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结合例子"><a href="#结合例子" class="headerlink" title="结合例子"></a>结合例子</h5><ol><li>第一次 <strong>new Promise()</strong> 执行时，返回的实例称为 <strong>promise1</strong></li><li><strong>then</strong> 的实现中，返回的实例称为 <strong>promise2</strong></li><li>第一次 <strong>new Promise().then</strong> 中，用户手动 <strong>return new Promise()</strong> 这里称为 <strong>user promise</strong></li><li>在 <strong>promise2</strong> 中的this，其实指向 <strong>promise1</strong>。在 <strong>promise2</strong> 中的函数会往this.cbs推入，等待执行</li><li>而 <strong>this.cbs.push()</strong> 中的函数，只有在 <strong>promise1</strong> resolve后才会执行。如果用户传入给 <strong>then</strong> 的执行函数中 <strong>（onResolved ）</strong> 返回了 <strong>user promise</strong> ，用户会在合适的时机执行 <strong>resolve promise2</strong> ，这时内部的 <code>if (res instanceof Promise) {   res.then(resolve)   }</code> 就会执行</li><li><strong>then2</strong> 中的函数只有在 <strong>promise2 resolve</strong> 后才会执行，此时 <strong>then2</strong> 是挂载到 <strong>promise2</strong> 的cbs中的，最终实现异步链式调用</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器输入URL后发生什么</title>
      <link href="/2021/02/02/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%90%8E%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/"/>
      <url>/2021/02/02/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%90%8E%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<img src="/images/browser/inter-to-browser.jpg" style="height:350px;"><blockquote><p>浏览器输入URL后发生什么</p></blockquote><a id="more"></a><h2 id="合成URL"><a href="#合成URL" class="headerlink" title="合成URL"></a>合成URL</h2><p>用户输入URL后，浏览器会根据用户输入的信息判断是搜索还是网址，如果是搜索内容，就将搜索内容+默认搜索引擎合成新的URL，如果用户输入的内容符合URL规则，浏览器就会根据URL协议，在这段内容上加上协议合成合法的URL</p><h2 id="DNS域名解析"><a href="#DNS域名解析" class="headerlink" title="DNS域名解析"></a>DNS域名解析</h2><p>DNS是什么，可以理解为一个电话薄。<br>例如 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> ，其中 <strong>baidu</strong> 就是DNS服务器对外公开的域名，其真实的ip地址为 <strong>103.235.46.39</strong><br>DNS 服务器可以将名称请求转换为 IP 地址</p><p>而其中DNS查询是一个复杂过程，整体流程大致如下</p><p><img src="/images/browser/browser-workflow.jpg" alt="avatar"></p><h2 id="建立TCP链接"><a href="#建立TCP链接" class="headerlink" title="建立TCP链接"></a>建立TCP链接</h2><p>这里包括三次握手与四次握手<br>首先，判断是不是https的，如果是，则HTTPS其实是HTTP + SSL / TLS 两部分组成，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。</p><p>进行三次握手，建立TCP连接。</p><ol><li><p>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；</p></li><li><p>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</p></li><li><p>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</p></li></ol><h3 id="SSL握手过程"><a href="#SSL握手过程" class="headerlink" title="SSL握手过程"></a>SSL握手过程</h3><p>第一阶段 建立安全能力 包括协议版本 会话Id 密码构件 压缩方法和初始随机数<br>第二阶段 服务器发送证书 密钥交换数据和证书请求，最后发送请求-相应阶段的结束信号<br>第三阶段 如果有证书请求客户端发送此证书 之后客户端发送密钥交换数据 也可以发送证书验证消息<br>第四阶段 变更密码构件和结束握手协议<br>完成了之后，客户端和服务器端就可以开始传送数据。更多 HTTPS 的资料可以看这里：</p><p><a href="https://zhuanlan.zhihu.com/p/26682342" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26682342</a><br><a href="https://segmentfault.com/a/1190000012196642" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012196642</a><br>备注</p><p>ACK：此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中；有两个取值：0和1，为1的时候表示应答域有效，反之为0。TCP协议规定，只有ACK=1时有效，也规定连接建立后所有发送的报文的ACK必须为1。</p><p>SYN(SYNchronization)：在连接建立时用来同步序号。当SYN=1而ACK=0时，表明这是一个连接请求报文。对方若同意建立连接，则应在响应报文中使SYN=1和ACK=1. 因此, SYN置1就表示这是一个连接请求或连接接受报文。</p><p>FIN(finis）即完，终结的意思， 用来释放一个连接。当 FIN = 1 时，表明此报文段的发送方的数据已经发送完毕，并要求释放连接。</p><h2 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h2><p>此处涉及客户端对服务器发起请求，服务器根据请求体，请求头，协议等返回客户端需要数据或文件</p><h2 id="关闭TCP链接"><a href="#关闭TCP链接" class="headerlink" title="关闭TCP链接"></a>关闭TCP链接</h2><ol><li><p>第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；</p></li><li><p>第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我”同意”你的关闭请求；</p></li><li><p>第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；</p></li><li><p>第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</p></li></ol><h2 id="浏览器渲染"><a href="#浏览器渲染" class="headerlink" title="浏览器渲染"></a>浏览器渲染</h2><p>按照渲染的时间顺序，流水线可分为如下几个子阶段：构建 DOM 树、样式计算、布局阶段、分层、栅格化和显示。如图：<br><img src="/images/browser/browser-workflow1.jpg" style="height:250px;"></p><ol><li>渲染进程将 HTML 内容转换为能够读懂DOM 树结构。</li><li>渲染引擎将 CSS 样式表转化为浏览器可以理解的styleSheets，计算出 DOM 节点的样式。</li><li>创建布局树，并计算元素的布局信息。</li><li>对布局树进行分层，并生成分层树。</li><li>为每个图层生成绘制列表，并将其提交到合成线程。合成线程将图层分图块，并栅格化将图块转换成位图。</li><li>合成线程发送绘制图块命令给浏览器进程。浏览器进程根据指令生成页面，并显示到显示器上。</li></ol><h3 id="构建DOM树"><a href="#构建DOM树" class="headerlink" title="构建DOM树"></a>构建DOM树</h3><img src="/images/browser/browser-workflow2.jpg" style="height:250px;"><p>具体步骤：</p><ol><li>转码（Bytes -&gt; Characters）—— 读取接收到的 HTML 二进制数据，按指定编码格式将字节转换为 HTML 字符串</li><li>Tokens 化（Characters -&gt; Tokens）—— 解析 HTML，将 HTML 字符串转换为结构清晰的 Tokens，每个 Token 都有特殊的含义同时有自己的一套规则</li><li>构建 Nodes（Tokens -&gt; Nodes）—— 每个 Node 都添加特定的属性（或属性访问器），通过指针能够确定 Node 的父、子、兄弟关系和所属 treeScope（例如：iframe 的 treeScope 与外层页面的 treeScope 不同）</li><li>构建 DOM 树（Nodes -&gt; DOM Tree）—— 最重要的工作是建立起每个结点的父子兄弟关系</li></ol><h3 id="样式计算"><a href="#样式计算" class="headerlink" title="样式计算"></a>样式计算</h3><p>渲染引擎将 CSS 样式表转化为浏览器可以理解的 styleSheets，计算出 DOM 节点的样式。<br>CSS 样式来源主要有 3 种，分别是通过 <strong>link 引用的外部 CSS 文件</strong>、<strong>style标签内的 CSS</strong>、<strong>元素的 style 属性内嵌的 CSS</strong>。其样式计算过程主要为</p><img src="/images/browser/browser-workflow3.jpg" style="height:250px;"><p>可以看到上面的 CSS 文本中有很多属性值，如 2em、blue、bold，这些类型数值不容易被渲染引擎理解，所以需要将所有值转换为渲染引擎容易理解的、标准化的计算值，这个过程就是属性值标准化。处理完成后再处理样式的继承和层叠，有些文章将这个过程称为CSSOM的构建过程。</p><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><p>将DOM树与样式树进行合并，此处注意 <strong>回流</strong> 与 <strong>重塑</strong>，最终显示浏览器上，渲染完成</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>参考 帖子：<a href="https://mp.weixin.qq.com/s?__biz=MzI0MzIyMDM5Ng==&mid=2649826404&idx=1&sn=e4ccac5fe9d96b26ca1d8d347276d2b1&scene=19#wechat_redirect" target="_blank">面试官：浏览器输入URL后发生了什么？</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack-代码切割提取</title>
      <link href="/2020/10/16/Webpack-%E4%BB%A3%E7%A0%81%E5%88%87%E5%89%B2%E6%8F%90%E5%8F%96/"/>
      <url>/2020/10/16/Webpack-%E4%BB%A3%E7%A0%81%E5%88%87%E5%89%B2%E6%8F%90%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/webpack/webpack-optimize.png" alt="avatar"></p><blockquote><p><strong><code>Webpack SplitChunks</code></strong> 代码切割与提取</p></blockquote><a id="more"></a><p>前文写过 <strong><code>Webpack</code></strong> 的优化配置，本文细说其中的 <strong><code>SplitChunks</code></strong> 配置</p><h2 id="chunks，module，bundle"><a href="#chunks，module，bundle" class="headerlink" title="chunks，module，bundle"></a>chunks，module，bundle</h2><p>module：在js中，每一个导入导出的<code>模块</code>，称为<code>module</code>，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module.export &#x3D; &#123;&#125;</span><br><span class="line">export default &#123;&#125;</span><br></pre></td></tr></table></figure><p>引入的文件或库，插件等</p><p>chunks：指<code>webpack</code>中的配置<code>splitChunks.chunks</code>，打包出来的入口文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">splitChunks: &#123;</span><br><span class="line">    chunks: &#39;all&#39;,</span><br><span class="line">    cacheGroups: &#123;</span><br><span class="line">        ****</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bundle：由<code>webpack</code>最终拆分出来的每一个包，如<br><img src="/images/webpack/chunks.png" alt="chunks"></p><h2 id="为什么需要拆分包"><a href="#为什么需要拆分包" class="headerlink" title="为什么需要拆分包"></a>为什么需要拆分包</h2><p>原因在于，随着项目开发后期时可能会引入第三方包，或者本地业务代码，工具库越来越大，首屏加载速度或某页面加载速度缓慢，单个文件可能达到几M甚至几十M的可能</p><h2 id="如何配置"><a href="#如何配置" class="headerlink" title="如何配置"></a>如何配置</h2><p>首先说下<code>splitChunks</code>下有哪些配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">optimization:&#123;</span><br><span class="line">    splitChunks:&#123;</span><br><span class="line">        usedExports: &#39;&#39;, &#x2F;&#x2F; 找出模块使用哪些导出来处理导出名称，忽略未使用的导出并生成更有效的代码。如果是true：分析每个运行时使用的导出，则是&quot;global&quot;：全局分析所有运行时的导出合并。</span><br><span class="line">        chunks: &#39;&#39;, &#x2F;&#x2F; &#39;all&#39;,&#39;async&#39;,&#39;initial&#39;,  &#39;all&#39;:异步与非异步都进入该选项匹配中，&#39;async&#39;:只有异步模块进入，&#39;initial&#39;:初始化时就能获取的模块</span><br><span class="line">        minSize: &#39;&#39;, &#x2F;&#x2F; 生成块的最小大小(以字节为单位)</span><br><span class="line">        minRemainingSize: &#39;&#39;, &#x2F;&#x2F; 在webpack 5中引入了option选项，通过确保拆分后剩余的最小块大小超过限制来避免大小为零的模块。默认为0，平时少用到</span><br><span class="line">        maxSize: &#39;&#39;, &#x2F;&#x2F; 最大模块拆分大小</span><br><span class="line">        minChunks: &#39;&#39;, &#x2F;&#x2F; entry引用的次数最小值才会被抽离出去</span><br><span class="line">        maxAsyncRequests: &#39;&#39;, &#x2F;&#x2F; 按需加载时最大并行请求数</span><br><span class="line">        maxInitialRequests: &#39;&#39;, &#x2F;&#x2F; 入口点的最大并行请求数</span><br><span class="line">        automaticNameDelimiter: &#39;&#39;, &#x2F;&#x2F; 默认情况下，webpack将使用块的来源和名称生成名称（例如vendors~main.js）。此选项使您可以指定用于生成名称的定界符。</span><br><span class="line">        enforceSizeThreshold: &#39;&#39;, &#x2F;&#x2F; 强制执行拆分的大小阈值和其他限制（minRemainingSize，maxAsyncRequests，maxInitialRequests）将被忽略。</span><br><span class="line">        &#x2F;&#x2F; 核心配置，对代码的拆分规则全在cacheGroups缓存组里配置，缓存组的每一个属性都是一个配置规则，我这里给他的default属性进行了配置，属性名可以不叫default可以自己定。属性的值是一个对象，里面放的我们对一个代码拆分规则的描述。</span><br><span class="line">        cacheGroups: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: &#39;&#39;, &#x2F;&#x2F; 提取出来的公共模块将会以这个来命名</span><br><span class="line">                chunks: &#39;&#39;, &#x2F;&#x2F; 指定哪些类型的chunk参与拆分，值可以是string可以是函数</span><br><span class="line">                priority: &#39;&#39;, &#x2F;&#x2F; cacheGroups中存在多个cache配置，该配置为当前规则的权重，越大匹配优先级越高</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cacheGroups</code>外的配置为<code>splitChunks</code>的全局配置，每一个<code>cacheGroups</code>中配置都会使用外部的配置</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>假设项目文件夹为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|--public&#x2F;</span><br><span class="line">|   |--index.html</span><br><span class="line">|--src&#x2F;</span><br><span class="line">|   |--a.js</span><br><span class="line">|   |--b.js</span><br><span class="line">|   |--c.js</span><br><span class="line">|   |--index.js</span><br><span class="line">|--package.json</span><br><span class="line">|--webpack.config.js</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;index.js</span><br><span class="line">import a from &#39;.&#x2F;a.js&#39;;</span><br><span class="line">import b from &#39;.&#x2F;b.js&#39;;</span><br><span class="line">function fn() &#123;</span><br><span class="line">    console.log(&#39;index-------&#39;);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h3 id="a-js"><a href="#a-js" class="headerlink" title="a.js"></a>a.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;a.js</span><br><span class="line">require(&#39;.&#x2F;c.js&#39;);</span><br><span class="line">const $ &#x3D; require(&#39;jquery&#39;)</span><br><span class="line">function fn() &#123;</span><br><span class="line">    console.log(&#39;a-------&#39;);</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; fn();</span><br></pre></td></tr></table></figure><h3 id="b-js"><a href="#b-js" class="headerlink" title="b.js"></a>b.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;b.js</span><br><span class="line">require(&#39;.&#x2F;c.js&#39;);</span><br><span class="line">const $ &#x3D; require(&#39;jquery&#39;)</span><br><span class="line">function fn() &#123;</span><br><span class="line">    console.log(&#39;b-------&#39;);</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; fn();</span><br></pre></td></tr></table></figure><h3 id="c-js"><a href="#c-js" class="headerlink" title="c.js"></a>c.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;c.js</span><br><span class="line">function fn() &#123;</span><br><span class="line">    console.log(&#39;c-------&#39;);</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; fn();</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; webpack.config.js</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class="line">        filename: &#39;[name].js&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &#39;.&#x2F;public&#x2F;index.html&#39;,</span><br><span class="line">            filename: &#39;index.html&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不配置任何splitChunks"><a href="#不配置任何splitChunks" class="headerlink" title="不配置任何splitChunks"></a>不配置任何splitChunks</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; webpack --mode&#x3D;development</span><br><span class="line"></span><br><span class="line">Hash: 58f075d584eee63560d0</span><br><span class="line">Version: webpack 4.44.2</span><br><span class="line">Time: 229ms</span><br><span class="line">Built at: 2020&#x2F;10&#x2F;20 下午3:49:40</span><br><span class="line">     Asset       Size  Chunks             Chunk Names</span><br><span class="line">index.html  247 bytes          [emitted]</span><br><span class="line">  index.js    324 KiB   index  [emitted]  index</span><br><span class="line">Entrypoint index &#x3D; index.js</span><br><span class="line">[.&#x2F;src&#x2F;a.js] 157 bytes &#123;index&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;b.js] 129 bytes &#123;index&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;c.js] 80 bytes &#123;index&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;index.js] 151 bytes &#123;index&#125; [built]</span><br><span class="line">    + 1 hidden module</span><br><span class="line">Child HtmlWebpackCompiler:</span><br><span class="line">     1 asset</span><br><span class="line">    Entrypoint HtmlWebpackPlugin_0 &#x3D; __child-HtmlWebpackPlugin_0</span><br><span class="line">    [.&#x2F;node_modules&#x2F;html-webpack-plugin&#x2F;lib&#x2F;loader.js!.&#x2F;public&#x2F;index.html] 474 bytes &#123;HtmlWebpackPlugin_0&#125; [built]</span><br></pre></td></tr></table></figure><h4 id="可以看到index-js模块大小为324k，里面包含a-js，b-js，c-js，jquery"><a href="#可以看到index-js模块大小为324k，里面包含a-js，b-js，c-js，jquery" class="headerlink" title="可以看到index.js模块大小为324k，里面包含a.js，b.js，c.js，jquery"></a>可以看到<code>index.js</code>模块大小为324k，里面包含a.js，b.js，c.js，jquery</h4><h3 id="初步配置splitChunks"><a href="#初步配置splitChunks" class="headerlink" title="初步配置splitChunks"></a>初步配置splitChunks</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.config.js</span><br><span class="line"></span><br><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        cacheGroups: &#123;</span><br><span class="line">            default: &#123;</span><br><span class="line">                name: &#39;common&#39;,</span><br><span class="line">                chunks: &#39;initial&#39;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt; webpack --mode&#x3D;development</span><br><span class="line"></span><br><span class="line">Hash: 5d698c9c939438c2aa3b</span><br><span class="line">Version: webpack 4.44.2</span><br><span class="line">Time: 226ms</span><br><span class="line">Built at: 2020&#x2F;10&#x2F;20 下午3:52:26</span><br><span class="line">     Asset       Size  Chunks             Chunk Names</span><br><span class="line"> common.js    320 KiB  common  [emitted]  common</span><br><span class="line">index.html  280 bytes          [emitted]</span><br><span class="line">  index.js   6.22 KiB   index  [emitted]  index</span><br><span class="line">Entrypoint index &#x3D; common.js index.js</span><br><span class="line">[.&#x2F;src&#x2F;a.js] 157 bytes &#123;common&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;b.js] 129 bytes &#123;common&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;c.js] 80 bytes &#123;common&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;index.js] 151 bytes &#123;common&#125; [built]</span><br><span class="line">    + 1 hidden module</span><br><span class="line">Child HtmlWebpackCompiler:</span><br><span class="line">     1 asset</span><br><span class="line">    Entrypoint HtmlWebpackPlugin_0 &#x3D; __child-HtmlWebpackPlugin_0</span><br><span class="line">    [.&#x2F;node_modules&#x2F;html-webpack-plugin&#x2F;lib&#x2F;loader.js!.&#x2F;public&#x2F;index.html] 474 bytes &#123;HtmlWebpackPlugin_0&#125; [built]</span><br></pre></td></tr></table></figure><h4 id="可以看到多了common-js模块大小为320k，里面包含a-js，b-js，c-js，jquery"><a href="#可以看到多了common-js模块大小为320k，里面包含a-js，b-js，c-js，jquery" class="headerlink" title="可以看到多了common.js模块大小为320k，里面包含a.js，b.js，c.js，jquery"></a>可以看到多了<code>common.js</code>模块大小为320k，里面包含a.js，b.js，c.js，jquery</h4><h3 id="添加权重priority，并且抽离node-modules中的第三方包"><a href="#添加权重priority，并且抽离node-modules中的第三方包" class="headerlink" title="添加权重priority，并且抽离node_modules中的第三方包"></a>添加权重<code>priority</code>，并且抽离<code>node_modules</code>中的第三方包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        minSize: 30,</span><br><span class="line">        cacheGroups: &#123;</span><br><span class="line">            default: &#123;</span><br><span class="line">                name: &#39;common&#39;,</span><br><span class="line">                chunks: &#39;initial&#39;,</span><br><span class="line">                priority: -20</span><br><span class="line">            &#125;,</span><br><span class="line">            vendors: &#123;  &#x2F;&#x2F;拆分第三方库（通过npm|yarn安装的库）</span><br><span class="line">                test: &#x2F;[\\&#x2F;]node_modules[\\&#x2F;]&#x2F;,</span><br><span class="line">                name: &#39;vendor&#39;,</span><br><span class="line">                chunks: &#39;initial&#39;,</span><br><span class="line">                priority: -10</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="结果如下："><a href="#结果如下：" class="headerlink" title="结果如下："></a>结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; webpack --mode&#x3D;development</span><br><span class="line"></span><br><span class="line">Hash: 40141540a6afd27e4c34</span><br><span class="line">Version: webpack 4.44.2</span><br><span class="line">Time: 237ms</span><br><span class="line">Built at: 2020&#x2F;10&#x2F;20 下午4:00:24</span><br><span class="line">     Asset       Size  Chunks             Chunk Names</span><br><span class="line"> common.js   2.27 KiB  common  [emitted]  common</span><br><span class="line">index.html  313 bytes          [emitted]</span><br><span class="line">  index.js   6.23 KiB   index  [emitted]  index</span><br><span class="line"> vendor.js    318 KiB  vendor  [emitted]  vendor</span><br><span class="line">Entrypoint index &#x3D; vendor.js common.js index.js</span><br><span class="line">[.&#x2F;src&#x2F;a.js] 157 bytes &#123;common&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;b.js] 129 bytes &#123;common&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;c.js] 80 bytes &#123;common&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;index.js] 151 bytes &#123;common&#125; [built]</span><br><span class="line">    + 1 hidden module</span><br><span class="line">Child HtmlWebpackCompiler:</span><br><span class="line">     1 asset</span><br><span class="line">    Entrypoint HtmlWebpackPlugin_0 &#x3D; __child-HtmlWebpackPlugin_0</span><br><span class="line">    [.&#x2F;node_modules&#x2F;html-webpack-plugin&#x2F;lib&#x2F;loader.js!.&#x2F;public&#x2F;index.html] 474 bytes &#123;HtmlWebpackPlugin_0&#125; [built]</span><br></pre></td></tr></table></figure><h4 id="可以看到多出vendor-js，大小318kb，而index-js大小减少到6-23kb，说明jQuery已经被抽离了，同时业务逻辑代码也抽离出"><a href="#可以看到多出vendor-js，大小318kb，而index-js大小减少到6-23kb，说明jQuery已经被抽离了，同时业务逻辑代码也抽离出" class="headerlink" title="可以看到多出vendor.js，大小318kb，而index.js大小减少到6.23kb，说明jQuery已经被抽离了，同时业务逻辑代码也抽离出"></a>可以看到多出<code>vendor.js</code>，大小318kb，而<code>index.js</code>大小减少到6.23kb，说明jQuery已经被抽离了，同时业务逻辑代码也抽离出</h4><h3 id="抽离指定文件"><a href="#抽离指定文件" class="headerlink" title="抽离指定文件"></a>抽离指定文件</h3><p>在<code>src/common</code>新增<code>utils.js</code>，并在<code>index.js</code>中引用他</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        minSize: 30,</span><br><span class="line">        cacheGroups: &#123;</span><br><span class="line">            default: &#123;</span><br><span class="line">                name: &#39;common&#39;,</span><br><span class="line">                chunks: &#39;initial&#39;,</span><br><span class="line">                priority: -20</span><br><span class="line">            &#125;,</span><br><span class="line">            vendors: &#123;  &#x2F;&#x2F;拆分第三方库（通过npm|yarn安装的库）</span><br><span class="line">                test: &#x2F;[\\&#x2F;]node_modules[\\&#x2F;]&#x2F;,</span><br><span class="line">                name: &#39;vendor&#39;,</span><br><span class="line">                chunks: &#39;initial&#39;,</span><br><span class="line">                priority: -10</span><br><span class="line">            &#125;,</span><br><span class="line">            utils:&#123;</span><br><span class="line">                test:&#x2F;[\\&#x2F;]src[\\&#x2F;]common[\\&#x2F;]&#x2F;,</span><br><span class="line">                name: &#39;utils&#39;,</span><br><span class="line">                chunks: &#39;initial&#39;,</span><br><span class="line">                priority: -9</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果如下：-1"><a href="#结果如下：-1" class="headerlink" title="结果如下："></a>结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt; webpack --mode&#x3D;development</span><br><span class="line"></span><br><span class="line">Hash: ec7341e5722a3d0efd5a</span><br><span class="line">Version: webpack 4.44.2</span><br><span class="line">Time: 238ms</span><br><span class="line">Built at: 2020&#x2F;10&#x2F;20 下午4:09:31</span><br><span class="line">     Asset       Size  Chunks             Chunk Names</span><br><span class="line"> common.js   2.31 KiB  common  [emitted]  common</span><br><span class="line">index.html  345 bytes          [emitted]</span><br><span class="line">  index.js   6.24 KiB   index  [emitted]  index</span><br><span class="line">  utils.js  387 bytes   utils  [emitted]  utils</span><br><span class="line"> vendor.js    318 KiB  vendor  [emitted]  vendor</span><br><span class="line">Entrypoint index &#x3D; utils.js vendor.js common.js index.js</span><br><span class="line">[.&#x2F;src&#x2F;a.js] 157 bytes &#123;common&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;b.js] 129 bytes &#123;common&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;c.js] 80 bytes &#123;common&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;common&#x2F;utils.js] 34 bytes &#123;utils&#125; [built]</span><br><span class="line">[.&#x2F;src&#x2F;index.js] 148 bytes &#123;common&#125; [built]</span><br><span class="line">    + 1 hidden module</span><br><span class="line">Child HtmlWebpackCompiler:</span><br><span class="line">     1 asset</span><br><span class="line">    Entrypoint HtmlWebpackPlugin_0 &#x3D; __child-HtmlWebpackPlugin_0</span><br><span class="line">    [.&#x2F;node_modules&#x2F;html-webpack-plugin&#x2F;lib&#x2F;loader.js!.&#x2F;public&#x2F;index.html] 474 bytes &#123;HtmlWebpackPlugin_0&#125; [built]</span><br></pre></td></tr></table></figure><h4 id="可以看到utils-js已经被单独抽离成一个chunks，至此已经实现抽离第三方包，业务代码，工具模块，指定模块包"><a href="#可以看到utils-js已经被单独抽离成一个chunks，至此已经实现抽离第三方包，业务代码，工具模块，指定模块包" class="headerlink" title="可以看到utils.js已经被单独抽离成一个chunks，至此已经实现抽离第三方包，业务代码，工具模块，指定模块包"></a>可以看到<code>utils.js</code>已经被单独抽离成一个chunks，至此已经实现抽离第三方包，业务代码，工具模块，指定模块包</h4><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>splitChunks</code>的抽离能节省许多重复代码的引入，加载。对项目大小与用户体验起到很大作用</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Npm-使用npm link</title>
      <link href="/2020/10/10/npm-%E4%BD%BF%E7%94%A8npm%20link/"/>
      <url>/2020/10/10/npm-%E4%BD%BF%E7%94%A8npm%20link/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/npm/npm2.jpg" alt="avatar"></p><blockquote><p>如何使用 <strong><code>npm link</code></strong> 调试npm包</p></blockquote><a id="more"></a><blockquote><p>在发布之前我们需要在本地环境保证包的可用性与安全性，不能偷偷发版后再使用 <strong>npm install</strong> 测试包，<br>这时候就要用到 <strong>npm</strong> 的自带工具指令 <strong>npm link</strong></p></blockquote><h1 id="npm-link-原理"><a href="#npm-link-原理" class="headerlink" title="npm link 原理"></a>npm link 原理</h1><p>他与 <strong>npm install -g</strong> 不同在于，<strong>npm install -g</strong> 存储路径为 <strong>/usr/local/lib/node_modules</strong>，而<strong>link</strong> 则在本地做一个快捷方式映射</p><p><img src="/images/npm/demo.png" alt="例子" title="例子"></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li>在本地环境的npm包项目中先<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure></li><li>在到需要使用该库的项目中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link xxx(&#39;你的npm包&#39;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Npm-发布教程</title>
      <link href="/2020/10/10/npm-%E5%8F%91%E5%B8%83%E6%95%99%E7%A8%8B/"/>
      <url>/2020/10/10/npm-%E5%8F%91%E5%B8%83%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/npm/npm1.jpg" alt="avatar"></p><blockquote><p>在 <strong>NPM</strong> 上发布自己的库</p></blockquote><a id="more"></a><h2 id="一、开始准备："><a href="#一、开始准备：" class="headerlink" title="一、开始准备："></a>一、开始准备：</h2><ol><li>首先在npm官网注册帐号 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm官网</a></li><li>在项目根目录 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>初始化 <strong>package.json</strong> 文件，如果已存在则不需要</li></ol><p><strong>package.json</strong> 包含几个关键字段:</p><ul><li>name: 包名，必须唯一，不能跟npm上的包重名。可以在 npm 官网搜索名字，如果存在则需要换个名字</li><li>version: 版本号，每次发布至 npm 都需要修改版本号，不能比上一次发布的版本号低</li><li>description: 描述</li><li>main: 入口文件，需指向我们编译后的包文件</li><li>keyword: 搜索关键字</li><li>author: 作者</li><li>private: 是否私有，需要修改为 false 才能发布到 npm</li><li>license: 开源协议</li></ul><ol start="3"><li>添加npm帐号授权<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure>需要输入帐号，密码，邮箱（注意需要先校验帐号绑定的邮箱才能授权成功）<br>通过以下命令可以查看是否授权成功：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm whoami</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、发布"><a href="#二、发布" class="headerlink" title="二、发布"></a>二、发布</h2><ol><li>发布普通package <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure></li><li>发布scope package <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish --access&#x3D;public</span><br></pre></td></tr></table></figure></li></ol><p><strong>scope-package</strong> 是npm的新特性，模块名带 <strong>@</strong>为指定作用域，每个用户都拥有自己的scope，如 <strong>@lzxc</strong> 为当前用户名</p><p>tips: 使用<strong>scope package</strong>好处是发布时package名不容易重复</p><h2 id="三、删除包"><a href="#三、删除包" class="headerlink" title="三、删除包"></a>三、删除包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish xxx</span><br></pre></td></tr></table></figure><blockquote><p>删除后不能发布同名的包</p></blockquote><h1 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h1><p><code>npm unpublish</code> 只能在发布后24h内有效，如果超过就需要找npm客服取消发布了</p><h2 id="四、删除指定版本的包"><a href="#四、删除指定版本的包" class="headerlink" title="四、删除指定版本的包"></a>四、删除指定版本的包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish xxx@xxx</span><br></pre></td></tr></table></figure><blockquote><p>删除后只能发布大于该删除包的版本号</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语:"></a>结语:</h2><ol><li>确认使用npm的镜像源</li><li>预先检查发布包的文件内容，发布前可以通过 <strong>npm pack</strong> 查看将发布包的文件内容，一般都需要提前做好过滤文件，过滤 <strong>npm</strong> 提交规则使用 <strong>.npmignore</strong> 语法跟 <strong>.gitignore</strong> 类似，还可以<br>使用 <strong>npm link</strong> 可以参考以下文章：<a href="https://lzxc.online/2020/10/10/npm-使用npm%20link/" target="_blank" rel="noopener">npm-使用npm link</a></li><li>检查包名字是否与npm库中存在重复名字</li><li>检查版本号，每次发布都需要更新版本号，如果发布成功后发现版本号不对，可以参考以下文章： <a href="https://lzxc.online/2020/10/10/npm-删除包或指定版本包/" target="_blank" rel="noopener">删除包或指定版本包</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.0-one Piece</title>
      <link href="/2020/09/21/vue3.0-one%20Piece/"/>
      <url>/2020/09/21/vue3.0-one%20Piece/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/vue/vue3.x.jpg" alt="avatar"></p><blockquote><p><strong>本文主要记录v3.0至v2.0的变动</strong></p></blockquote><a id="more"></a><blockquote><p><strong>喜大普庆，vue终于发布3.0版本，代号为One-Piece，原文链接：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0" target="_blank" rel="noopener">v3.0.0</a></strong></p></blockquote><h2 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h2><p>适用v2.0与v3.0</p><p>slot插槽的改变，在v2.6版本已经在官方文档上支持v-slot，#缩写等，所以不多赘述<br>原文链接：<a href="https://cn.vuejs.org/v2/api/#slot-%E5%BA%9F%E5%BC%83" target="_blank" rel="noopener">slot</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- vue 2.x --&gt;</span><br><span class="line">&lt;foo&gt;</span><br><span class="line">  &lt;bar slot&#x3D;&quot;one&quot; slot-scope&#x3D;&quot;one&quot;&gt;</span><br><span class="line">    &lt;div slot-scope&#x3D;&quot;bar&quot;&gt;</span><br><span class="line">      &#123;&#123; one &#125;&#125; &#123;&#123; bar &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;bar&gt;</span><br><span class="line"></span><br><span class="line">  &lt;bar slot&#x3D;&quot;two&quot; slot-scope&#x3D;&quot;two&quot;&gt;</span><br><span class="line">    &lt;div slot-scope&#x3D;&quot;bar&quot;&gt;</span><br><span class="line">      &#123;&#123; two &#125;&#125; &#123;&#123; bar &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;bar&gt;</span><br><span class="line">&lt;&#x2F;foo&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- vue 3.x --&gt;</span><br><span class="line">&lt;foo&gt;</span><br><span class="line">  &lt;template v-slot:one&#x3D;&quot;one&quot;&gt;</span><br><span class="line">    &lt;bar v-slot&#x3D;&quot;bar&quot;&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; one &#125;&#125; &#123;&#123; bar &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;bar&gt;</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template v-slot:two&#x3D;&quot;two&quot;&gt;</span><br><span class="line">    &lt;bar v-slot&#x3D;&quot;bar&quot;&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; two &#125;&#125; &#123;&#123; bar &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;bar&gt;</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;foo&gt;</span><br></pre></td></tr></table></figure><h2 id="指令动态参数"><a href="#指令动态参数" class="headerlink" title="指令动态参数"></a>指令动态参数</h2><p>适用v2.0与v3.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- v-bind with dynamic key --&gt;</span><br><span class="line">&lt;div v-bind:[key]&#x3D;&quot;value&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-bind shorthand with dynamic key --&gt;</span><br><span class="line">&lt;div :[key]&#x3D;&quot;value&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-on with dynamic event --&gt;</span><br><span class="line">&lt;div v-on:[event]&#x3D;&quot;handler&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-on shorthand with dynamic event --&gt;</span><br><span class="line">&lt;div @[event]&#x3D;&quot;handler&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-slot with dynamic name --&gt;</span><br><span class="line">&lt;foo&gt;</span><br><span class="line">  &lt;template v-slot:[name]&gt;</span><br><span class="line">    Hello</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;foo&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-slot shorthand with dynamic name --&gt;</span><br><span class="line">&lt;!-- pending #3 --&gt;</span><br><span class="line">&lt;foo&gt;</span><br><span class="line">  &lt;template #[name]&gt;</span><br><span class="line">    Default slot</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;foo&gt;</span><br></pre></td></tr></table></figure><h2 id="Tree-shaking"><a href="#Tree-shaking" class="headerlink" title="Tree-shaking"></a>Tree-shaking</h2><p>适用v3.0<br>在vue3.0中api等使用方式有极大变化，而这种变化对文件压缩大小的优化有好处，不便之处就是写起来较麻烦了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- vue 2.x --&gt;</span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line">Vue.nextTick(() &#x3D;&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">const obj &#x3D; Vue.observable(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">&lt;!-- vue 3.x --&gt;</span><br><span class="line">import Vue, &#123; nextTick, observable &#125; from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line">Vue.nextTick &#x2F;&#x2F; undefined</span><br><span class="line"></span><br><span class="line">nextTick(() &#x3D;&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">const obj &#x3D; observable(&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="sync与v-model"><a href="#sync与v-model" class="headerlink" title=".sync与v-model"></a>.sync与v-model</h2><p>这两项变动是互相影响的，.sync在v3.0直接移除，转而支持v-model多配置，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- vue 2.x --&gt;</span><br><span class="line">&lt;MyComponent v-bind:title.sync&#x3D;&quot;title&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- vue 3.x --&gt;</span><br><span class="line">&lt;MyComponent v-model:title&#x3D;&quot;title&quot; v-model:name&#x3D;&quot;name&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- vue 2.x --&gt;</span><br><span class="line">&lt;input v-bind&#x3D;&quot;xxx&quot; v-on:change&#x3D;&quot;$emit(&#39;change&#39;, $event.target.checked)&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- vue 3.x --&gt;</span><br><span class="line">&lt;input </span><br><span class="line">:model-value&#x3D;&quot;xxx&quot; v-on:[&#39;update:model-value&#39;]&#x3D;&quot;newValue &#x3D;&gt; &#123; xxx &#x3D; newValue &#125;&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><p>适用v3.0<br>不再需要 <strong>functional:true</strong> 选项， <strong>&lt;template functional&gt;\</strong> 标签也不支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- vue 2.x --&gt;</span><br><span class="line">const FunctionalComp &#x3D; &#123;</span><br><span class="line">  functional: true,</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    return h(&#39;div&#39;, &#96;Hello! $&#123;props.name&#125;&#96;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&lt;!-- vue 3.x --&gt;</span><br><span class="line">import &#123; h &#125; from &#39;vue&#39;</span><br><span class="line">const FunctionalComp &#x3D; (props, &#123; slots, attrs, emit &#125;) &#x3D;&gt; &#123;</span><br><span class="line">  return h(&#39;div&#39;, &#96;Hello! $&#123;props.name&#125;&#96;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局api"><a href="#全局api" class="headerlink" title="全局api"></a>全局api</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- vue 2.x --&gt;</span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.ignoredElements &#x3D; [&#x2F;^app-&#x2F;]</span><br><span class="line">Vue.use(&#x2F;* ... *&#x2F;)</span><br><span class="line">Vue.mixin(&#x2F;* ... *&#x2F;)</span><br><span class="line">Vue.component(&#x2F;* ... *&#x2F;)</span><br><span class="line">Vue.directive(&#x2F;* ... *&#x2F;)</span><br><span class="line"></span><br><span class="line">Vue.prototype.customProperty &#x3D; () &#x3D;&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br><span class="line"></span><br><span class="line">&lt;!-- vue 3.x --&gt;</span><br><span class="line">import &#123; createApp &#125; from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line"></span><br><span class="line">const app &#x3D; createApp(App)</span><br><span class="line"></span><br><span class="line">app.config.isCustomElement &#x3D; tag &#x3D;&gt; tag.startsWith(&#39;app-&#39;)</span><br><span class="line">app.use(&#x2F;* ... *&#x2F;)</span><br><span class="line">app.mixin(&#x2F;* ... *&#x2F;)</span><br><span class="line">app.component(&#x2F;* ... *&#x2F;)</span><br><span class="line">app.directive(&#x2F;* ... *&#x2F;)</span><br><span class="line"></span><br><span class="line">app.config.globalProperties.customProperty &#x3D; () &#x3D;&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">app.mount(App, &#39;#app&#39;)</span><br></pre></td></tr></table></figure><h2 id="指令钩子函数"><a href="#指令钩子函数" class="headerlink" title="指令钩子函数"></a>指令钩子函数</h2><p>适用v3.0<br>在vue 3.x中指令内部的钩子函数仿照组件声明周期了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- vue 2.x --&gt;</span><br><span class="line">const MyDirective &#x3D; &#123;</span><br><span class="line">  bind(el, binding, vnode, prevVnode) &#123;&#125;,</span><br><span class="line">  inserted() &#123;&#125;,</span><br><span class="line">  update() &#123;&#125;,</span><br><span class="line">  componentUpdated() &#123;&#125;,</span><br><span class="line">  unbind() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- vue 3.x --&gt;</span><br><span class="line">const MyDirective &#x3D; &#123;</span><br><span class="line">  beforeMount(el, binding, vnode, prevVnode) &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;,</span><br><span class="line">  beforeUpdate() &#123;&#125;,</span><br><span class="line">  updated() &#123;&#125;,</span><br><span class="line">  beforeUnmount() &#123;&#125;, &#x2F;&#x2F; new</span><br><span class="line">  unmounted() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="transition、transition-class"><a href="#transition、transition-class" class="headerlink" title="transition、transition-class"></a>transition、transition-class</h2><p>适用v3.0<br>当<strong>template</strong>作为组件的根元素时，外部切换不会触发过渡效果<br><strong>v-enter</strong> 重命名为<strong>v-enter-from</strong>，<strong>v-leave</strong>重命名为<strong>v-leave-from</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;transition&gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;show&quot; class&#x3D;&quot;modal&quot;&gt;&lt;slot&#x2F;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;transition&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.v-enter-from, .v-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">.v-leave-from, .v-enter-to &#123;</span><br><span class="line">  opacity: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><p>适用v3.0</p><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><p><strong>router-link</strong> 新增 <strong>scope-slot</strong> 与 <strong>custom</strong> 属性，移除 <strong>tag</strong> 和 <strong>event</strong><br>这点对于封装视图组件或菜单组件尤为重要，使组件更具有语义及更纯粹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;&quot; custom v-slot&#x3D;&quot;&#123; href, navigate, isActive &#125;&quot;&gt;</span><br><span class="line">  &lt;li :class&#x3D;&quot;&#123; &#39;active&#39;: isActive &#125;&quot;&gt;</span><br><span class="line">    &lt;a :href&#x3D;&quot;href&quot; @click&#x3D;&quot;navigate&quot;&gt;</span><br><span class="line">      &lt;Icon&gt;home&lt;&#x2F;Icon&gt;&lt;span class&#x3D;&quot;xs-hidden&quot;&gt;Home&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><h3 id="路由匹配所有"><a href="#路由匹配所有" class="headerlink" title="路由匹配所有"></a>路由匹配所有</h3><p>以往匹配所有路由的写法<code>{ path:&#39;*&#39; }</code>即可，现改为<code>{ path: &#39;/:catchAll(.*)&#39; }</code></p><h3 id="获取当前路由信息"><a href="#获取当前路由信息" class="headerlink" title="获取当前路由信息"></a>获取当前路由信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import router from &#39;..&#x2F;router&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const currentRoute &#x3D; router.currentRoute.value</span><br><span class="line">    console.log(currentRoute)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>router为定义vue路由的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createRouter, createWebHashHistory &#125; from &#39;vue-router&#39;</span><br><span class="line">const router &#x3D; createRouter(&#123;</span><br><span class="line">  history: createWebHashHistory(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><p>通过 <strong>defineAsyncComponent</strong> 函数创建  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineAsyncComponent &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; simple usage</span><br><span class="line">const AsyncFoo &#x3D; defineAsyncComponent(() &#x3D;&gt; import(&quot;.&#x2F;Foo.vue&quot;))</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p><code>router.addRoutes</code> 是v2.x版本的新增路由方法，先新增如下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; router.addRoute(route: RouteRecord) 动态添加路由</span><br><span class="line">&#x2F;&#x2F; router.removeRoute(name: string | symbol)，动态删除路由</span><br><span class="line">&#x2F;&#x2F; router.hasRoute(name: string | symbol): boolean ，判断路由是否存在</span><br><span class="line">&#x2F;&#x2F; router.getRoutes(): RouteRecord[] 获取路由列表</span><br><span class="line"></span><br><span class="line">router.addRoute(&#123;</span><br><span class="line">  path: &#39;&#x2F;new-route&#39;,</span><br><span class="line">  name: &#39;NewRoute&#39;,</span><br><span class="line">  component: NewRoute</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; add to the children of an existing route</span><br><span class="line">router.addRoute(&#39;ParentRoute&#39;, &#123;</span><br><span class="line">  path: &#39;new-route&#39;,</span><br><span class="line">  name: &#39;NewRoute&#39;,</span><br><span class="line">  component: NewRoute</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.removeRoute(&#39;NewRoute&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; normalized version of the records added</span><br><span class="line">const routeRecords &#x3D; router.getRoutes()</span><br></pre></td></tr></table></figure><h2 id="样式-scoped"><a href="#样式-scoped" class="headerlink" title="样式 scoped"></a>样式 scoped</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 深度选择器 *&#x2F;</span><br><span class="line">::v-deep(.foo) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* slot content 起作用 *&#x2F;</span><br><span class="line">::v-slotted(.foo) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 全局 *&#x2F;</span><br><span class="line">::v-global(.foo) &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="emits-option"><a href="#emits-option" class="headerlink" title="emits-option"></a>emits-option</h2><p>与v2.x版本相比，多了要先定义emit出去的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const Foo &#x3D; defineComponent(&#123;</span><br><span class="line">  emits: &#123;</span><br><span class="line">    submit: (payload: &#123; email: string; password: string &#125;) &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; perform runtime validation</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    onSubmit() &#123;</span><br><span class="line">      this.$emit(&#39;submit&#39;, &#123;</span><br><span class="line">        email: &#39;foo@bar.com&#39;,</span><br><span class="line">        password: 123 &#x2F;&#x2F; Type error!</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      this.$emit(&#39;non-declared-event&#39;) &#x2F;&#x2F; Type error!</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="组件根元素数量"><a href="#组件根元素数量" class="headerlink" title="组件根元素数量"></a>组件根元素数量</h2><p><strong>template</strong> 不在是限制只有一个，在v3.x中可以存在多个根元素</p><h2 id="v3-x中废弃"><a href="#v3-x中废弃" class="headerlink" title="v3.x中废弃"></a>v3.x中废弃</h2><ul><li>beforeCreate、created</li><li>filters</li><li>keycode</li><li>inline-template</li><li>data-object</li><li>on，off 和 $once</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义部分</span><br><span class="line">st&#x3D;&gt;start: coding beginning</span><br><span class="line">e&#x3D;&gt;end: 秃秃秃秃，继续coding</span><br><span class="line">op1&#x3D;&gt;operation: 框架更新拉</span><br><span class="line">sub1&#x3D;&gt;subroutine: 继续使用老框架</span><br><span class="line">cond&#x3D;&gt;condition: 是否学习?:&gt;https:&#x2F;&#x2F;cn.vuejs.org&#x2F;</span><br><span class="line">io&#x3D;&gt;inputoutput: 技能提升，升职加薪</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用jsx封装复杂组件</title>
      <link href="/2020/07/15/%E4%BD%BF%E7%94%A8jsx%E5%B0%81%E8%A3%85%E5%A4%8D%E6%9D%82%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/07/15/%E4%BD%BF%E7%94%A8jsx%E5%B0%81%E8%A3%85%E5%A4%8D%E6%9D%82%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/vue/vue-jsx-bg.png" alt="avatar"></p><blockquote><p><strong>使用 <code>jsx</code> 封装移动端级联组件</strong></p></blockquote><a id="more"></a><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>JSX，是一个 JavaScript 的语法扩展，通常在 React 中使用。<br>在 Vue 里使用的话需安装对应包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @vue&#x2F;babel-preset-jsx @vue&#x2F;babel-helper-vue-jsx-merge-props</span><br></pre></td></tr></table></figure><p>在 <strong>.babelrc</strong> 或者 <strong>bable.config.js</strong> 配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@vue&#x2F;babel-preset-jsx&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>这里直接丢文档，里面有详细使用介绍</p><p><a href="https://github.com/vuejs/jsx#installation" target="_blank" rel="noopener">jsx 文档</a></p><h2 id="实际项目代码"><a href="#实际项目代码" class="headerlink" title="实际项目代码"></a>实际项目代码</h2><p>直接上代码：<br><strong>Cascader</strong> 是父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Button, Toast &#125; from &quot;vant&quot;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import qs from &quot;qs&quot;;</span><br><span class="line"></span><br><span class="line">import Item from &quot;.&#x2F;item&quot;;</span><br><span class="line"></span><br><span class="line">const treeToList &#x3D; (function() &#123;</span><br><span class="line">  return function(tree, result &#x3D; [], level &#x3D; 0, parentKey &#x3D; &quot;&quot;) &#123;</span><br><span class="line">    tree.forEach(node &#x3D;&gt; &#123;</span><br><span class="line">      node.parentKey &#x3D; parentKey;</span><br><span class="line">      result.push(node);</span><br><span class="line">      node.deepIndex &#x3D; level + 1;</span><br><span class="line">      node.children &amp;&amp;</span><br><span class="line">        treeToList(node.children, result, level + 1, node[&quot;label&quot;]);</span><br><span class="line">    &#125;);</span><br><span class="line">    return result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">const mapTree &#x3D; (function() &#123;</span><br><span class="line">  return function(list) &#123;</span><br><span class="line">    const result &#x3D; &#123;&#125;;</span><br><span class="line">    list.forEach(i &#x3D;&gt; &#123;</span><br><span class="line">      if (result[i.deepIndex]) return false;</span><br><span class="line">      result[i.deepIndex] &#x3D; &#123;</span><br><span class="line">        index: i.deepIndex - 1,</span><br><span class="line">        deepIndex: i.deepIndex,</span><br><span class="line">        value: &quot;&quot;,</span><br><span class="line">        columns: list.filter(item &#x3D;&gt; item.deepIndex &#x3D;&#x3D;&#x3D; i.deepIndex)</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    return result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Cascader&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123; type: Array &#125;,</span><br><span class="line">    visible: &#123; type: Boolean, default: false &#125;,</span><br><span class="line">    item: &#123; type: Object &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    calculateValue: &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        return this.value;</span><br><span class="line">      &#125;,</span><br><span class="line">      set(v) &#123;</span><br><span class="line">        this.$emit(&quot;input&quot;, v);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    stepItem() &#123;</span><br><span class="line">      if (!Object.keys(this.pickerArr).length) return null;</span><br><span class="line">      return this.pickerArr[this.stepIndex + 1];</span><br><span class="line">    &#125;,</span><br><span class="line">    defaultSelectIndex() &#123;</span><br><span class="line">      if (!this.calculateValue?.length) return 0;</span><br><span class="line">      if (!this.stepItem?.columns) return 0;</span><br><span class="line">      const current &#x3D; this.calculateValue[this.stepIndex];</span><br><span class="line">      const defaultItem &#x3D; this.stepItem.columns.findIndex(</span><br><span class="line">        i &#x3D;&gt; i[this.pickTitle] &#x3D;&#x3D;&#x3D; current</span><br><span class="line">      );</span><br><span class="line">      return defaultItem;</span><br><span class="line">    &#125;,</span><br><span class="line">    hasNext() &#123;</span><br><span class="line">      if (!Object.keys(this.pickerArr).length) return false;</span><br><span class="line">      return !!this.pickerArr[this.stepIndex + 2]?.columns.length;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      &#x2F;&#x2F; 原数据数组</span><br><span class="line">      resultArr: [],</span><br><span class="line">      stepIndex: 0,</span><br><span class="line">      pickTitle: &quot;&quot;,</span><br><span class="line">      &#x2F;&#x2F;   格式化后树结构</span><br><span class="line">      pickerArr: [],</span><br><span class="line">      &#x2F;&#x2F; 选择过的数组</span><br><span class="line">      selectArr: [],</span><br><span class="line">      isClosed: false</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.init();</span><br><span class="line">    this.stepIndex &#x3D; 0;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    &#x2F;&#x2F; 过滤出当前层级下的所有数据</span><br><span class="line">    filterPick(arr) &#123;</span><br><span class="line">      if (!arr) return [];</span><br><span class="line">      const currentPerent &#x3D; this.selectArr[this.stepIndex - 1];</span><br><span class="line">      if (!currentPerent) return arr;</span><br><span class="line">      return arr.filter(item &#x3D;&gt; &#123;</span><br><span class="line">        if (item.parentKey &#x3D;&#x3D;&#x3D; &quot;&quot;) return true;</span><br><span class="line">        return item.parentKey &#x3D;&#x3D; currentPerent;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    async init() &#123;</span><br><span class="line">      &#x2F;&#x2F; 判断是使用后台配置的数据还是另使用请求接口的数据</span><br><span class="line">      const isRemote &#x3D; !!this.item?.targetSource?.relationField;</span><br><span class="line">      &#x2F;&#x2F; resultArr为判断后取到的树数据，按照树结构层级过滤成自定义的数据</span><br><span class="line">      const tree &#x3D; treeToList(this.resultArr);</span><br><span class="line">      &#x2F;&#x2F; 过滤成所需要的结构</span><br><span class="line">      this.pickerArr &#x3D; mapTree(tree);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 远程请求方法</span><br><span class="line">    fetch() &#123;&#125;,</span><br><span class="line">    confirm(val, index) &#123;</span><br><span class="line">      if (!this.hasNext) &#123;</span><br><span class="line">        &#x2F;&#x2F; this.selectArr[this.stepIndex] &#x3D; val[this.pickTitle];</span><br><span class="line">        this.selectArr.push(val[this.pickTitle]);</span><br><span class="line">        this.calculateValue &#x3D; this.selectArr;</span><br><span class="line">        this.$emit(&quot;update:visible&quot;, false);</span><br><span class="line">        this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">          this.selectArr &#x3D; [];</span><br><span class="line">        &#125;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      if (!this.stepItem.columns[index]?.children?.length) &#123;</span><br><span class="line">        Toast.fail(&quot;当前选项没有下一级&quot;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      this.selectArr.push(val[this.pickTitle]);</span><br><span class="line">      this.stepIndex++;</span><br><span class="line">    &#125;,</span><br><span class="line">    cancel() &#123;</span><br><span class="line">      if (this.stepIndex &#x3D;&#x3D;&#x3D; 0) return;</span><br><span class="line">      this.stepIndex--;</span><br><span class="line">      this.selectArr.pop();</span><br><span class="line">    &#125;,</span><br><span class="line">    btnCancel() &#123;</span><br><span class="line">      this.$emit(&quot;update:visible&quot;, false);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render() &#123;</span><br><span class="line">    const itemAttrs &#x3D; &#123;</span><br><span class="line">      attrs: &#123;</span><br><span class="line">        value: this.visible,</span><br><span class="line">        position: &quot;bottom&quot;,</span><br><span class="line">        getContainer: () &#x3D;&gt; document.getElementById(&quot;chooseDom&quot;),</span><br><span class="line">        &quot;value-key&quot;: this.pickTitle,</span><br><span class="line">        closeOnClickOverlay: false,</span><br><span class="line">        confirmButtonText:</span><br><span class="line">          this.stepIndex &gt;&#x3D; 0 &amp;&amp; this.hasNext ? &quot;下一步&quot; : &quot;确定&quot;,</span><br><span class="line">        cancelButtonText: this.stepIndex &#x3D;&#x3D;&#x3D; 0 ? &quot; &quot; : &quot;上一步&quot;,</span><br><span class="line">        columns: this.filterPick(this.stepItem?.columns),</span><br><span class="line">        &quot;default-index&quot;: this.defaultSelectIndex,</span><br><span class="line">        &quot;close-on-popstate&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      on: &#123;</span><br><span class="line">        confirm: this.confirm,</span><br><span class="line">        cancel: this.cancel</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div id&#x3D;&quot;cascaderContainer&quot;&gt;</span><br><span class="line">      &#x2F;&#x2F; 选中后回显以&#39; &#x2F; &#39;隔开</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;this.calculateValue</span><br><span class="line">            ? this.calculateValue</span><br><span class="line">                .map(i &#x3D;&gt; &#96; &#x2F; $&#123;i&#125;&#96;)</span><br><span class="line">                .join(&quot;&quot;)</span><br><span class="line">                .substr(3)</span><br><span class="line">            : &quot;&quot;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Item &#123;...itemAttrs&#125;&gt;</span><br><span class="line">          &lt;Button</span><br><span class="line">            slot&#x3D;&quot;btn&quot;</span><br><span class="line">            text&#x3D;&#123;&quot;取消&quot;&#125;</span><br><span class="line">            style&#x3D;&#123;&#123; width: &quot;100%&quot; &#125;&#125;</span><br><span class="line">            onClick&#x3D;&#123;this.btnCancel&#125;</span><br><span class="line">          &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Item&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Item</strong> 是 <strong>Cascader</strong> 的子元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Popup, Picker &#125; from &quot;vant&quot;;</span><br><span class="line"></span><br><span class="line">var getPropsAndAttrs &#x3D; (function() &#123;</span><br><span class="line">  return function(attrs, props) &#123;</span><br><span class="line">    const propsObj &#x3D; &#123;&#125;;</span><br><span class="line">    for (const k in props) &#123;</span><br><span class="line">      if (props.hasOwnProperty(k)) &#123;</span><br><span class="line">        const &#123; default: defaultValue &#125; &#x3D; props[k];</span><br><span class="line">        propsObj[k] &#x3D; defaultValue;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Object.keys(attrs).forEach(key &#x3D;&gt; &#123;</span><br><span class="line">      const attrKey &#x3D; getCamelCase(key);</span><br><span class="line">      if (!propsObj.hasOwnProperty(attrKey)) return;</span><br><span class="line">      const attrsVal &#x3D; attrs[key] &#x3D;&#x3D;&#x3D; &quot;&quot; ? true : attrs[key];</span><br><span class="line">      delete propsObj[attrKey];</span><br><span class="line">      propsObj[attrKey] &#x3D; attrsVal;</span><br><span class="line">    &#125;);</span><br><span class="line">    return &#123; props: propsObj &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 兼容驼峰入参</span><br><span class="line">var getCamelCase &#x3D; (function() &#123;</span><br><span class="line">  return function(str) &#123;</span><br><span class="line">    return str.replace(&#x2F;-([a-z])&#x2F;g, function(all, i) &#123;</span><br><span class="line">      return i.toUpperCase();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;CascaderItem&quot;,</span><br><span class="line">  render() &#123;</span><br><span class="line">    const ctx &#x3D; this;</span><br><span class="line">    const &#123; props: PopupDefaultProps &#125; &#x3D; getPropsAndAttrs(</span><br><span class="line">      this.$attrs,</span><br><span class="line">      Popup.props</span><br><span class="line">    );</span><br><span class="line">    const &#123; props: pickerDefaultProps &#125; &#x3D; getPropsAndAttrs(</span><br><span class="line">      this.$attrs,</span><br><span class="line">      Picker.props</span><br><span class="line">    );</span><br><span class="line">    const popupAttr &#x3D; &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        ...PopupDefaultProps,</span><br><span class="line">        ...this.$attrs,</span><br><span class="line">        value: this.$attrs.value</span><br><span class="line">      &#125;,</span><br><span class="line">      on: &#123;</span><br><span class="line">        input: e &#x3D;&gt; &#123;</span><br><span class="line">          this.$emit(&quot;update:visible&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      style: &#123;</span><br><span class="line">        display: &quot;flex&quot;,</span><br><span class="line">        flexDirection: &quot;column&quot;,</span><br><span class="line">        background: &quot;#f7f8fa&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    const pickerAttr &#x3D; &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        ...pickerDefaultProps,</span><br><span class="line">        showToolbar: true</span><br><span class="line">      &#125;,</span><br><span class="line">      on: &#123;</span><br><span class="line">        ...ctx.$listeners</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Popup &#123;...popupAttr&#125;&gt;</span><br><span class="line">          &lt;Picker &#123;...pickerAttr&#125; &#x2F;&gt;</span><br><span class="line">          &#123;this.$slots.btn&#125;</span><br><span class="line">        &lt;&#x2F;Popup&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>pc 端配置数据：<br><img src="/images/vue/vue-jsx1.png" alt="avatar"></p><p>移动端展示效果：<br><img src="/images/vue/vue-jsx.gif" alt="avatar"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+next+github-搭建个人博客</title>
      <link href="/2020/07/09/hexo-next-github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/07/09/hexo-next-github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/blog/hexo+github.jpg" alt="avatar"></p><blockquote><p><code>hexo</code> + <code>next</code> + <code>githubPage</code> 搭建个人博客教程</p></blockquote><a id="more"></a><h1 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h1><p>hexo文档 : <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a><br>next文档 : <a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">https://theme-next.iissnan.com/</a><br>node: <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">官网</a><br>github: <a href="https://github.com/" target="_blank" rel="noopener">官网</a></p><p>安装node与安装hexo,新建github帐号</p><p>以github帐号名新建一个repositories,取名为 : github帐号名+github.io,如<code>xxx.github.io</code><br><img src="/images/blog/github-new1.png" alt="avatar"></p><h1 id="二、Hexo的安装与基本命令"><a href="#二、Hexo的安装与基本命令" class="headerlink" title="二、Hexo的安装与基本命令"></a>二、Hexo的安装与基本命令</h1><p>安装hexo : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g hexo</span><br></pre></td></tr></table></figure><p>初始化在本地生成Hexo相关目录 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init Note  # 初始化创建,会再桌面创建Note文件夹</span><br><span class="line">cd Note         # 进入Note目录</span><br><span class="line">npm install     # 进一步安装hexo所需文件</span><br></pre></td></tr></table></figure><blockquote><p> <strong>注: 直接执行hexo init需要在空文件夹，而hexo init xxx 类似创建空文件夹后再执行init</strong></p></blockquote><p>hexo三连 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean(or c)          # 清空已有hexo网站文件</span><br><span class="line">hexo generate(or g)   # 依据网页文本与新的CSS样式生成新网站文件</span><br><span class="line">hexo server(or s)     # 启动本地服务器,可以在localhost:4000查看网站修改效果</span><br></pre></td></tr></table></figure><p>将刚刚新建的repositories与远程关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:AAAA&#x2F;AAAA.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h1 id="三、下载安装hexo主题"><a href="#三、下载安装hexo主题" class="headerlink" title="三、下载安装hexo主题"></a>三、下载安装hexo主题</h1><p>使用next主题 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><blockquote><p>克隆完后,这时有两个配置文件,一个是hexo根目录的 <code>_config.yml</code> ,一个是next主题包的 <code>_config.yml</code> 注意区分</p></blockquote><h1 id="四、配置hexo-deploy"><a href="#四、配置hexo-deploy" class="headerlink" title="四、配置hexo-deploy"></a>四、配置hexo-deploy</h1><p>安装hexo的deploy工具 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-deployer-git</span><br></pre></td></tr></table></figure><p>修改hexo配置文件 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:xxx&#x2F;xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>使用hexo-deploy发布到配置文件中的github项目 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy  或  hexo d</span><br></pre></td></tr></table></figure><p>此时执行 <code>hexo d</code> 便能根据hexo配置的deploy字段发布到对应仓库 </p><p>其余hexo常用命令 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;newArticleTitle&quot;  #创建文章 可以简写为hexo n</span><br><span class="line">hexo new page &quot;newPageName&quot;  #创建页面</span><br><span class="line">hexo generate  #生成静态页面至public目录 可以简写为hexo g</span><br><span class="line">hexo deploy  #将public目录部署到github 可以简写为hexo d</span><br><span class="line">hexo server  #启动本地服务 可以简写为hexo s</span><br><span class="line">hexo help  #hexo帮助</span><br><span class="line">hexo version  #查看版本信息</span><br><span class="line">hexo s -g  #生成页面并启动本地服务</span><br><span class="line">hexo d -g  #生成页面并部署到github</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>此时在浏览器输入 <code>xxx/github.io</code> 就能打开deploy上去的博客了,如果想跳转到自己购买的域名时,只需在刚刚的repositories根目录下新建 <code>CNAME</code> 的文件,写入你购买的域名即可</p><p><strong>注: 配置next的menu时发现跳转页面地址解析错误,只需把 <code>tags: /tags || tags</code> 中的 <code>||</code> 号左右的空格删除即可解析正确</strong></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios二次封装</title>
      <link href="/2020/07/01/Axios%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/"/>
      <url>/2020/07/01/Axios%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/javascript/wrap-axios-cover.png" alt="avatar"></p><blockquote><p><code>axios</code> 二次封装</p></blockquote><a id="more"></a><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h2 id="使用类进行封装"><a href="#使用类进行封装" class="headerlink" title="使用类进行封装"></a>使用类进行封装</h2><p>先上代码： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">const qs &#x3D; require(&#39;querystring&#39;)</span><br><span class="line"></span><br><span class="line">class ApiClient &#123;</span><br><span class="line">  constructor(config) &#123;</span><br><span class="line">    this.defaultConfig &#x3D; config</span><br><span class="line">  &#125;</span><br><span class="line">    static defaultConfig &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    request(&#123;</span><br><span class="line">      url,</span><br><span class="line">      data &#x3D; &#123;&#125;,</span><br><span class="line">      type &#x3D; &#39;post&#39;,</span><br><span class="line">      showError &#x3D; true,</span><br><span class="line">      &#x2F;&#x2F; showLoading &#x3D; false,</span><br><span class="line">      cancelToken &#x3D; false,</span><br><span class="line">      specialCode &#x3D; ERRORCODELIST,</span><br><span class="line">      config &#x3D; &#123;&#125;</span><br><span class="line">    &#125;) &#123;</span><br><span class="line">      const that &#x3D; this</span><br><span class="line">      const subConfig &#x3D; Object.assign(&#123;&#125;, ApiClient.defaultConfig, config, &#123;</span><br><span class="line">        cancelToken: cancelToken ? new axios.CancelToken(function(c) &#123;</span><br><span class="line">          that.axiosCancel &#x3D; c</span><br><span class="line">        &#125;) : null</span><br><span class="line">      &#125;)</span><br><span class="line">      const instance &#x3D; axios.create(subConfig)</span><br><span class="line">      ApiClient.setInterceptors(instance)</span><br><span class="line">      return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">        if (!url) &#123;</span><br><span class="line">          reject(&#123; retCode: &#39;url_null&#39;, message: &#39;url未定义&#39; &#125;)</span><br><span class="line">          return</span><br><span class="line">        &#125;</span><br><span class="line">        if (type &#x3D;&#x3D;&#x3D; &#39;get&#39;) &#123;</span><br><span class="line">          data &#x3D; Object.assign(&#123;&#125;, &#123; params: &#123; ...data &#125;&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        instance[type](url, data, config).then(</span><br><span class="line">          response &#x3D;&gt; &#123;</span><br><span class="line">            const &#123; code &#125; &#x3D; response</span><br><span class="line">            if (code &#x3D;&#x3D;&#x3D; &#39;000000&#39;) &#123;</span><br><span class="line">              resolve(response.data)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              if (showError) &#123;</span><br><span class="line">                &#x2F;&#x2F; message.error(response.msg)</span><br><span class="line">                return</span><br><span class="line">              &#125;</span><br><span class="line">              &#x2F;&#x2F; 后端respondBody中的code在错误code列表中时，统一处理</span><br><span class="line">              if (specialCode.includes(code)) &#123;</span><br><span class="line">                &#x2F;&#x2F; xxxx</span><br><span class="line">              &#125;</span><br><span class="line">              reject(response)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          err &#x3D;&gt; &#123;</span><br><span class="line">            console.log(err, &#39;$http的error&#39;)</span><br><span class="line">            if (showError) &#123;</span><br><span class="line">              console.log(&#39;axios响应错误打印&#39;, err)</span><br><span class="line">              &#x2F;&#x2F; message.error(err.msg)</span><br><span class="line">            &#125;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static setInterceptors(axiosInstance) &#123;</span><br><span class="line">      axiosInstance.interceptors.request.use(</span><br><span class="line">        ApiClient.interceptorsRequest,</span><br><span class="line">        ApiClient.interceptorsRequestErr</span><br><span class="line">      )</span><br><span class="line">      axiosInstance.interceptors.response.use(</span><br><span class="line">        ApiClient.interceptorsRespond,</span><br><span class="line">        ApiClient.interceptorsRespondErr</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static interceptorsRequest(config) &#123;</span><br><span class="line">      &#x2F;&#x2F; 在这里添加loading</span><br><span class="line">      &#x2F;&#x2F; 配置token</span><br><span class="line">      &#x2F;&#x2F; config.headers.AuthorizationToken &#x3D;</span><br><span class="line">      &#x2F;&#x2F;   localStorage.getItem(&quot;AuthorizationToken&quot;) || &quot;&quot;;</span><br><span class="line"></span><br><span class="line">      if (config.method &#x3D;&#x3D;&#x3D; &#39;get&#39;) &#123;</span><br><span class="line">        config.data &#x3D; qs.stringify(config.data)</span><br><span class="line">      &#125;</span><br><span class="line">      return config</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static interceptorsRequestErr(error) &#123;</span><br><span class="line">      return Promise.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static interceptorsRespond(response) &#123;</span><br><span class="line">      return response.data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static interceptorsRespondErr(error) &#123;</span><br><span class="line">      &#x2F;&#x2F; eslint-disable-next-line no-console</span><br><span class="line">      console.log(error, &#39;axios响应错误拦截&#39;, error.response)</span><br><span class="line">      if (error.response) &#123;</span><br><span class="line">        &#x2F;&#x2F; 响应错误码处理</span><br><span class="line">        let errMsg &#x3D; &#39;&#39;</span><br><span class="line">        switch (error.response.status) &#123;</span><br><span class="line">          case 403:</span><br><span class="line">            break</span><br><span class="line">          case 404:</span><br><span class="line">            errMsg &#x3D; &#39;网络请求找不到&#39;</span><br><span class="line">            break</span><br><span class="line">          case 500:</span><br><span class="line">            errMsg &#x3D; &#39;网络异常&#39;</span><br><span class="line">            break</span><br><span class="line">          default:</span><br><span class="line">            errMsg &#x3D; &#39;未知错误&#39;</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">        return Promise.reject(&#123;</span><br><span class="line">          msg: errMsg,</span><br><span class="line">          code: error.response.status</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      return Promise.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const apiClient &#x3D; new ApiClient(&#123;</span><br><span class="line">  timeout: 20 * 1000,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    &#39;Content-Type&#39;: &#39;application&#x2F;json;chartset&#x3D;utf-8&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  withCredentials: true</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default apiClient</span><br><span class="line">export const request &#x3D; apiClient.request</span><br></pre></td></tr></table></figure><h2 id="根据微服务分类接口"><a href="#根据微服务分类接口" class="headerlink" title="根据微服务分类接口"></a>根据微服务分类接口</h2><p>先上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import XXX from &quot;.&#x2F;xxxxx.js&quot;; &#x2F;&#x2F; 本地接口定义</span><br><span class="line"></span><br><span class="line">class Apis &#123;</span><br><span class="line">  register(&#123; apis, base &#125;) &#123;</span><br><span class="line">    if (base) &#123;</span><br><span class="line">      Object.keys(apis).forEach(key &#x3D;&gt; &#123;</span><br><span class="line">        this[&#96;$&#123;base&#125;&#x2F;$&#123;key&#125;&#96;] &#x3D; apis[key];</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      Object.keys(apis).forEach(key &#x3D;&gt; &#123;</span><br><span class="line">        this[key] &#x3D; apis[key];</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const ApisStore &#x3D; new Apis();</span><br><span class="line">ApisStore.register(checkoutCounter);</span><br><span class="line">export default ApisStore;</span><br></pre></td></tr></table></figure><p>本地接口定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 本地封装的axios</span><br><span class="line">import apiClinet from &quot;common&#x2F;utils&#x2F;apiClinet&quot;;</span><br><span class="line">&#x2F;&#x2F; 微服务上下文</span><br><span class="line">const base &#x3D; &quot;chpay&quot;;</span><br><span class="line"></span><br><span class="line">const apis &#x3D; &#123;</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 接口注释</span><br><span class="line">   * methods GET</span><br><span class="line">   * xxx:integer | 浏览器类型 1 微信浏览器 2 手机APP端h5 3 pc端</span><br><span class="line">   * xxx:string  | 平台订单流水号</span><br><span class="line">   *&#x2F;</span><br><span class="line">  queryCashierOrder: arg &#x3D;&gt;</span><br><span class="line">    apiClinet.request(&#123;</span><br><span class="line">      url: &#96;$&#123;base&#125;&#x2F;cashier&#x2F;queryCashierOrder&#96;,</span><br><span class="line">      type: &quot;get&quot;,</span><br><span class="line">      data: arg</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 接口注释</span><br><span class="line">   * methods POST</span><br><span class="line">   * xxx:string | 支付渠道</span><br><span class="line">   * xxx:string | 平台订单流水号</span><br><span class="line">   *&#x2F;</span><br><span class="line">  fetchUnifiedOrder: arg &#x3D;&gt;</span><br><span class="line">    apiClinet.request(&#123; url: &#96;$&#123;base&#125;&#x2F;cashier&#x2F;unifiedOrder&#96;, data: arg &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  base,</span><br><span class="line">  apis</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在.vue文件中使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">methods:&#123;</span><br><span class="line">    fetch(arg)&#123;</span><br><span class="line">        this.$apiStore[&quot;chpay&#x2F;fetchUnifiedOrder&quot;](&#123;arg&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>项目目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">|--api&#x2F;</span><br><span class="line">|   |--xxx.js</span><br><span class="line">|   |--index.js &#x2F;&#x2F; 对不同服务统一挂载</span><br><span class="line">|--common&#x2F;</span><br><span class="line">|   |--js</span><br><span class="line">|       |--apiCline.js</span><br><span class="line">|--src&#x2F;</span><br><span class="line">|   |--assets&#x2F;</span><br><span class="line">|   |--components&#x2F;</span><br><span class="line">|   |--router&#x2F;</span><br><span class="line">|   |--store&#x2F;</span><br><span class="line">|   |--views&#x2F;</span><br><span class="line">|       |--Home.Vue</span><br><span class="line">|   |--App.vue</span><br><span class="line">|   |--main.js</span><br><span class="line">|...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack-优化篇</title>
      <link href="/2020/07/01/Webpack-%E4%BC%98%E5%8C%96%E7%AF%87/"/>
      <url>/2020/07/01/Webpack-%E4%BC%98%E5%8C%96%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/webpack/webpack-bg.jpg" alt="avatar"></p><blockquote><p><code>webpack</code> 可优化配置教程</p></blockquote><a id="more"></a><h2 id="量化"><a href="#量化" class="headerlink" title="量化"></a>量化</h2><p>如何直观的查看优化的效果，这时就需要用到 <strong>speed-measure-webpack-plugin</strong> 插件，该插件可以测量各个插件和loader所花费的时间，使用之后，构建时，会得到类似下面这样的信息：</p><p><img src="/images/webpack/webpack1.jpg" alt="avatar"></p><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.config.js</span><br><span class="line">const SpeedMeasurePlugin &#x3D; require(&quot;speed-measure-webpack-plugin&quot;);</span><br><span class="line">const smp &#x3D; new SpeedMeasurePlugin();</span><br><span class="line"></span><br><span class="line">const config &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F;...webpack配置</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; smp.wrap(config);</span><br></pre></td></tr></table></figure><h2 id="exclude-include-cache-loader-alias-noParse-extensions-resolve"><a href="#exclude-include-cache-loader-alias-noParse-extensions-resolve" class="headerlink" title="exclude/include cache-loader alias noParse extensions resolve"></a>exclude/include cache-loader alias noParse extensions resolve</h2><blockquote><p><strong>alias</strong></p></blockquote><ul><li>当我们代码中出现 <strong>import ‘vue’</strong> 时， <strong>webpack</strong> 会采用向上递归搜索的方式去<strong>node_modules</strong> 目录下找。为了减少搜索范围我们可以直接告诉<strong>webpack</strong>去哪个路径下查找。也就是别名(<strong>alias</strong>)的配置</li></ul><blockquote><p><strong>exclude/include</strong></p></blockquote><ul><li><strong>exclude</strong>的优先级要高于<strong>include</strong>，支持正则或指定路径传入</li></ul><blockquote><p><strong>noParse</strong></p></blockquote><ul><li>如果一些第三方模块没有 <strong>AMD/CommonJS</strong> 规范版本，可以使用 <strong>noParse</strong> 来标识这个模块，这样 <strong>Webpack</strong> 会引入这些模块，但是不进行转化和解析，从而提升 <strong>Webpack</strong> 的构建性能 ，例如：<strong>jquery</strong> 、<strong>lodash</strong>。</li></ul><blockquote><p><strong>extensions</strong></p></blockquote><ul><li><strong>webpack</strong>会根据<strong>extensions</strong>定义的后缀查找文件(频率较高的文件类型优先写在前面)</li></ul><blockquote><p><strong>resolve</strong></p></blockquote><ul><li><strong>resolve</strong> 配置 <strong>webpack</strong> 如何寻找模块所对应的文件。</li></ul><p><img src="/images/webpack/webpack2.jpg" alt="avatar"></p><h2 id="cache-loader"><a href="#cache-loader" class="headerlink" title="cache-loader"></a>cache-loader</h2><p>在一些性能开销较大的 <strong>loader</strong> 之前添加 <strong>cache-loader</strong>，将结果缓存中磁盘中。默认保存在 <strong>node_modueles/.cache/cache-loader</strong> 目录下。</p><p>首先安装依赖：<br><code>npm install cache-loader -D</code></p><p>cache-loader 的配置很简单，放在其他 loader 之前即可。修改Webpack 的配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">    module: &#123;</span><br><span class="line">        &#x2F;&#x2F;我的项目中,babel-loader耗时比较长，所以我给它配置了&#96;cache-loader&#96;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: &#x2F;\.jsx?$&#x2F;,</span><br><span class="line">                use: [&#39;cache-loader&#39;,&#39;babel-loader&#39;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>也可以不使用<strong>cache-loader</strong>，而给对应 <strong>loader</strong> 添加 <strong>cacheDirectory</strong> 配置也能实现缓存</p></li><li><p><strong>cacheDirectory</strong>：默认值为 false。当有设置时，指定的目录将用来缓存 <strong>loader</strong> 的执行结果。之后的 <strong>Webpack</strong> 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 <strong>Babel</strong> 重新编译过程。设置空值或者 true 的话，使用默认缓存目录：<strong>node_modules/.cache/babel-loader</strong> 。开启 <strong>babel-loader</strong> 的缓存和配置 <strong>cache-loader</strong>，我比对了下，构建时间很接近。</p></li></ul><p><img src="/images/webpack/webpack3.jpg" alt="avatar"></p><h2 id="happyPack"><a href="#happyPack" class="headerlink" title="happyPack"></a>happyPack</h2><blockquote><p>在 <strong>webpack</strong> 构建过程中，实际上耗费时间大多数用在 <strong>loader</strong> 解析转换以及代码的压缩中。日常开发中我们需要使用 <strong>Loader</strong> 对js，css，图片，字体等文件做转换操作，并且转换的文件数据量也是非常大。由于js单线程的特性使得这些转换操作不能并发处理文件，而是需要一个个文件进行处理。<strong>HappyPack</strong> 的基本原理是将这部分任务分解到多个子进程中去并行处理，子进程处理完成后把结果发送到主进程中，从而减少总的构建时间</p></blockquote><p><img src="/images/webpack/webpack4.jpg" alt="avatar"></p><h2 id="thread-loader"><a href="#thread-loader" class="headerlink" title="thread-loader"></a>thread-loader</h2><p>除了使用 <strong>Happypack</strong> 外，我们也可以使用 <strong>thread-loader</strong> ，把 <strong>thread-loader</strong> 放置在其它 loader 之前，那么放置在这个 <strong>loader</strong> 之后的 <strong>loader</strong> 就会在一个单独的 worker 池中运行。</p><p>在 <strong>worker</strong> 池(<strong>worker pool</strong>)中运行的 loader 是受到限制的。例如：</p><ul><li>这些 <strong>loader</strong> 不能产生新的文件。</li><li>这些 <strong>loader</strong> 不能使用定制的 <strong>loader</strong> API（也就是说，通过插件）。</li><li>这些 <strong>loader</strong> 无法获取 webpack 的选项设置。</li></ul><p>安装：<code>npm install thread-loader -D</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    module: &#123;</span><br><span class="line">        &#x2F;&#x2F;我的项目中,babel-loader耗时比较长，所以我给它配置 thread-loader</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: &#x2F;\.jsx?$&#x2F;,</span><br><span class="line">                use: [&#39;thread-loader&#39;, &#39;cache-loader&#39;, &#39;babel-loader&#39;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>thread-loader</strong> 和 <strong>Happypack</strong>构建时间没什么区别，不过 <strong>thread-loader</strong> 配置更简单一些。</p><h2 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h2><p>我们可以将一些JS文件存储在 <strong>CDN</strong> 上(减少 <strong>Webpack</strong> 打包出来的 js 体积)，在 <strong>index.html</strong> 中通过  <strong><code>&lt;script&gt;</code></strong>  标签引入，如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;root&quot;&gt;root&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;libs.baidu.com&#x2F;jquery&#x2F;2.0.0&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>我们希望在使用时，仍然可以通过 <strong>import</strong> 的方式去引用(如 <strong>import $ from ‘jquery’</strong> )，并且希望 <strong>webpack</strong> 不会对其进行打包，此时就可以配置 <strong>externals</strong> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">    externals: &#123;</span><br><span class="line">        &#x2F;&#x2F;jquery通过script引入之后，全局中即有了 jQuery 变量</span><br><span class="line">        &#39;jquery&#39;: &#39;jQuery&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h2><p><strong>DllPlugin</strong> 和 <strong>DLLReferencePlugin</strong> 可以实现拆分 <strong>bundles</strong>，并且可以大大提升构建速度，<strong>DllPlugin</strong> 和 <strong>DLLReferencePlugin</strong> 都是 <strong>webpack</strong> 的内置模块。<br>我们新建一个 <strong>webpack</strong> 的配置文件，来专门用于编译动态链接库，例如名为: <strong>webpack.config.dll.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.config.dll.js</span><br><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        react: [&#39;react&#39;, &#39;react-dom&#39;]</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: &#39;production&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &#39;[name].dll.[hash:6].js&#39;,</span><br><span class="line">        path: path.resolve(__dirname, &#39;dist&#39;, &#39;dll&#39;),</span><br><span class="line">        library: &#39;[name]_dll&#39; &#x2F;&#x2F;暴露给外部使用</span><br><span class="line">        &#x2F;&#x2F;libraryTarget 指定如何暴露内容，缺省时就是 var</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new webpack.DllPlugin(&#123;</span><br><span class="line">            &#x2F;&#x2F;name和library一致</span><br><span class="line">            name: &#39;[name]_dll&#39;, </span><br><span class="line">            path: path.resolve(__dirname, &#39;dist&#39;, &#39;dll&#39;, &#39;manifest.json&#39;) &#x2F;&#x2F;manifest.json的生成路径</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <strong>package.json</strong> 的 <strong>scripts</strong> 中增加: <code>&quot;build:dll&quot;: &quot;webpack --config webpack.config.dll.js&quot;</code></p><p><strong>manifest.json</strong> 用于让 <strong>DLLReferencePlugin</strong> 映射到相关依赖上。<br>接着更改 <strong>webpack.config.js</strong> 中的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.config.js</span><br><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new webpack.DllReferencePlugin(&#123;</span><br><span class="line">            manifest: path.resolve(__dirname, &#39;dist&#39;, &#39;dll&#39;, &#39;manifest.json&#39;)</span><br><span class="line">        &#125;),</span><br><span class="line">        new CleanWebpackPlugin(&#123;</span><br><span class="line">            cleanOnceBeforeBuildPatterns: [&#39;**&#x2F;*&#39;, &#39;!dll&#39;, &#39;!dll&#x2F;**&#39;] &#x2F;&#x2F;不删除dll目录</span><br><span class="line">        &#125;),</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <strong>npm run build</strong> 构建，可以看到 <strong>bundle.js</strong> 的体积大大减少</p><p>修改 <strong>index.html</strong> 文件，在其中引入 <strong>react.dll.js</strong></p><p><code>&lt;script src=&quot;/dll/react.dll.9dcd9d.js&quot;&gt;&lt;/script&gt;</code></p><p><img src="/images/webpack/webpack5.jpg" alt="avatar"></p><blockquote><p>包的体积</p></blockquote><p><img src="/images/webpack/webpack6.jpg" alt="avatar"></p><h2 id="splitChunks"><a href="#splitChunks" class="headerlink" title="splitChunks"></a>splitChunks</h2><blockquote><p>splitChunks</p></blockquote><p>对于项目越来越大，抽离公共代码就越显得重要，公共代码只需要下载一次就缓存起来了，避免了重复下载。</p><p>抽离公共代码对于单页应用和多页应该在配置上没有什么区别，都是配置在 optimization.splitChunks 中。假如我们不配置splitChunks，默认打包出来的是 <strong>bundle.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;&#x2F;&#x2F;分割代码块</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendor: &#123;</span><br><span class="line">                    &#x2F;&#x2F;第三方依赖</span><br><span class="line">                    priority: 1, &#x2F;&#x2F;设置优先级，首先抽离第三方模块</span><br><span class="line">                    name: &#39;vendor&#39;,</span><br><span class="line">                    test: &#x2F;node_modules&#x2F;,</span><br><span class="line">                    chunks: &#39;initial&#39;,</span><br><span class="line">                    minSize: 0,</span><br><span class="line">                    minChunks: 1 &#x2F;&#x2F;最少引入了1次</span><br><span class="line">                &#125;,</span><br><span class="line">                &#x2F;&#x2F;缓存组</span><br><span class="line">                common: &#123;</span><br><span class="line">                    &#x2F;&#x2F;公共模块</span><br><span class="line">                    chunks: &#39;initial&#39;,</span><br><span class="line">                    name: &#39;common&#39;,</span><br><span class="line">                    minSize: 100, &#x2F;&#x2F;大小超过100个字节</span><br><span class="line">                    minChunks: 3 &#x2F;&#x2F;最少引入了3次</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>runtimeChunk</p></blockquote><p><strong>runtimeChunk</strong> 的作用是将包含 chunk 映射关系的列表从 <strong>main.js</strong> 中抽离出来，在配置了 <strong>splitChunk</strong> 时，记得配置 <strong>runtimeChunk</strong>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        runtimeChunk: &#123;</span><br><span class="line">            name: &#39;manifest&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终构建出来的文件中会生成一个 <strong>manifest.js</strong>。</p><blockquote><p>webpack-bundle-analyzer</p></blockquote><p>此时借助 <strong>webpack-bundle-analyzer</strong> 可以分析项目中哪些包可以拆分<br>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;webpack.config.prod.js</span><br><span class="line">const BundleAnalyzerPlugin &#x3D; require(&#39;webpack-bundle-analyzer&#39;).BundleAnalyzerPlugin;</span><br><span class="line">const merge &#x3D; require(&#39;webpack-merge&#39;);</span><br><span class="line">const baseWebpackConfig &#x3D; require(&#39;.&#x2F;webpack.config.base&#39;);</span><br><span class="line">module.exports &#x3D; merge(baseWebpackConfig, &#123;</span><br><span class="line">    &#x2F;&#x2F;....</span><br><span class="line">    plugins: [</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">        new BundleAnalyzerPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/webpack7.jpg" alt="avatar"></p><p>这时我们可以对 <strong>vender</strong>  拆分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    optimization: &#123;</span><br><span class="line">    concatenateModules: false,</span><br><span class="line">    splitChunks: &#123;&#x2F;&#x2F;分割代码块</span><br><span class="line">      maxInitialRequests:6, &#x2F;&#x2F;默认是5</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendor: &#123;</span><br><span class="line">          &#x2F;&#x2F;第三方依赖</span><br><span class="line">          priority: 1,</span><br><span class="line">          name: &#39;vendor&#39;,</span><br><span class="line">          test: &#x2F;node_modules&#x2F;,</span><br><span class="line">          chunks: &#39;initial&#39;,</span><br><span class="line">          minSize: 100,</span><br><span class="line">          minChunks: 1 &#x2F;&#x2F;重复引入了几次</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;lottie-web&#39;: &#123;</span><br><span class="line">          name: &quot;lottie-web&quot;, &#x2F;&#x2F; 单独将 react-lottie 拆包</span><br><span class="line">          priority: 5, &#x2F;&#x2F; 权重需大于&#96;vendor&#96;</span><br><span class="line">          test: &#x2F;[\&#x2F;]node_modules[\&#x2F;]lottie-web[\&#x2F;]&#x2F;,</span><br><span class="line">          chunks: &#39;initial&#39;,</span><br><span class="line">          minSize: 100,</span><br><span class="line">          minChunks: 1 &#x2F;&#x2F;重复引入了几次</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新构建，结果如下所示：<br><img src="https://user-gold-cdn.xitu.io/2020/3/14/170d9bf36fcad19c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="avatar"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>参考帖子：</p><p><a href="https://juejin.im/post/5e6cfdc85188254913107c1f#heading-0," target="_blank" rel="noopener"带你深度解锁Webpack系列(优化篇)"">带你深度解锁Webpack系列(优化篇)</a></p><p><a href="https://juejin.im/post/5de87444518825124c50cd36?utm_source=gold_browser_extension#heading-28" target="_blank" rel="noopener">2020年了,再不会webpack敲得代码就不香了(近万字实战)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack-babel</title>
      <link href="/2020/07/01/Webpack-babel/"/>
      <url>/2020/07/01/Webpack-babel/</url>
      
        <content type="html"><![CDATA[<h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p><img src="https://babel.docschina.org/img/babel-black.svg" alt="avatar"></p><blockquote><p><code>babel/core</code>、<code>Polyfill</code>、<code>babel/plugin-transform-runtime</code></p></blockquote><a id="more"></a><p>Babel 能够做的事情：</p><ul><li>语法转换</li><li>通过 Polyfill 方式在目标环境中添加缺失的特性(@babel/polyfill 模块)</li><li>源码转换(codemods)</li></ul><h2 id="核心-babel-core"><a href="#核心-babel-core" class="headerlink" title="核心 @babel/core"></a>核心 @babel/core</h2><p><strong>Babel</strong> 的核心功能包含在 <strong>@babel/core</strong> 模块中。不安装 <strong>@babel/core</strong>，无法使用 <strong>babel</strong> 进行编译。</p><h1 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h1><p><strong>@babel/polyfill</strong> 模块包括 <strong>core-js</strong> 和一个自定义的 <strong>regenerator runtime</strong> 模块，可以模拟完整的 <strong>ES2015+</strong> 环境（不包含第4阶段前的提议）。 使我们能使用类似 <strong>Promise</strong> 和 <strong>WeakMap</strong> 构造函数、<strong>Array.form</strong> 或 <strong>Object.assign</strong> 的静态方法、<strong>Array.prototype.includes</strong> 之类的实例方法以及生成器函数(前提是使用了 <strong>@babel/plugin-transform-regenerator</strong> 插件)。为了添加这些功能，<strong>polyfill</strong> 将添加到全局范围和类似 String 这样的内置原型中。但会对全局环境造成污染。</p><p>首先，安装 <strong>@babel/polyfill</strong> 依赖:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @babel&#x2F;polyfill</span><br></pre></td></tr></table></figure><p>我们需要将完整的 <strong>polyfill</strong> 在代码之前加载，修改我们的 <strong>src/index.js</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#39;@babel&#x2F;polyfill&#39;;</span><br><span class="line"></span><br><span class="line">const isHas &#x3D; [1,2,3].includes(2);</span><br><span class="line"></span><br><span class="line">const p &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    resolve(100);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> <strong>webpack</strong> 中进行配置</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry: [</span><br><span class="line">    require.resolve(&#39;.&#x2F;polyfills&#39;),</span><br><span class="line">    path.resolve(&#39;.&#x2F;index&#39;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>polyfills.js</strong> 文件内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;当然，还可能有一些其它的 polyfill，例如 stage 4之前的一些 polyfill</span><br><span class="line">import &#39;@babel&#x2F;polyfill&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>如果完整的引入 <strong>@babel/polyfill</strong> 会导致我们最终构建出的包的体积增大</p><p><strong>@babel/polyfill</strong>的包大小为89K (当前 <strong>@babel/polyfill</strong> 版本为 7.7.0)。</p></blockquote><p><strong>@babel/preset-env</strong> 提供了一个 <strong>useBuiltIns</strong> 参数，设置值为 <strong>usage</strong> 时，就只会包含代码需要的 polyfill 。有一点需要注意：配置此参数的值为 <strong>usage</strong> ，必须要同时设置 <strong>corejs</strong> (如果不设置，会给出警告，默认使用的是<strong>“corejs”: 2</strong>) ，注意: 这里仍然需要安装 <strong>@babel/polyfill</strong>(当前 <strong>@babel/polyfill</strong> 版本默认会安装 <strong>“corejs”: 2</strong>):</p><p>首先说一下使用 <strong>core-js@3</strong> 的原因，<strong>core-js@2</strong> 分支中已经不会再添加新特性，新特性都会添加到 <strong>core-js@3</strong>。例如你使用了 Array.prototype.flat()，如果你使用的是 <strong>core-js@2</strong>，那么其不包含此新特性。为了可以使用更多的新特性，建议大家使用 <strong>core-js@3</strong>。</p><p>安装依赖依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save core-js@3</span><br></pre></td></tr></table></figure><p>现在，修改 <strong>Babel</strong> 的配置文件如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;.babelrcconst presets &#x3D; [    </span><br><span class="line">    [        </span><br><span class="line">        &quot;@babel&#x2F;env&quot;,        </span><br><span class="line">        &#123;               </span><br><span class="line">            &quot;useBuiltIns&quot;: &quot;usage&quot;,</span><br><span class="line">            &quot;corejs&quot;: 3</span><br><span class="line">        &#125;    </span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>Babel</strong> 会检查所有代码，以便查找在目标环境中缺失的功能，然后仅仅把需要的 <strong>polyfill</strong> 包含进来。</p><p>例如，src/index.js 代码不变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const isHas &#x3D; [1,2,3].includes(2);</span><br><span class="line"></span><br><span class="line">const p &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    resolve(100);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们看看编译出来的文件 <strong>(lib/index)</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">require(&quot;core-js&#x2F;modules&#x2F;es.array.includes&quot;);</span><br><span class="line"></span><br><span class="line">require(&quot;core-js&#x2F;modules&#x2F;es.object.to-string&quot;);</span><br><span class="line"></span><br><span class="line">require(&quot;core-js&#x2F;modules&#x2F;es.promise&quot;);</span><br><span class="line"></span><br><span class="line">var isHas &#x3D; [1, 2, 3].includes(2);</span><br><span class="line"></span><br><span class="line">var p &#x3D; new Promise(function (resolve, reject) &#123;</span><br><span class="line">    resolve(100);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同样的代码，我们用 webpack 构建一下(production 模式)，能看到最终的代码大小仅为: 20KB。而如果我们引入整个 <strong>@babel/polyfill</strong> 的话，构建出的包大小为：89KB</p><p>前面曾提到，在 <strong>useBuiltIns</strong> 参数值为 usage 时，仍然需要安装 <strong>@babel/polyfill</strong>，虽然我们上面的代码转换中看起来并没有使用到，但是，如果我们源码中使用到了 async/await，那么编译出来的代码需要 require(<strong>“regenerator-runtime/runtime”</strong>)，在 <strong>@babel/polyfill</strong> 的依赖中，当然啦，你也可以只安装 regenerator-runtime/runtime 取代安装 <strong>@babel/polyfill</strong>。</p><p>下面我要说的内容，也许你已经知道，也许你还不知道，这都不重要，但是此刻起，你要知道了: <strong>Babel</strong> 会使用很小的辅助函数来实现类似 <strong>_createClass</strong> 等公共方法。默认情况下，它将被添加(<strong>inject</strong>)到需要它的每个文件中。</p><p>假如，我们的 src/index.js 是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">    constructor(x, y) &#123;</span><br><span class="line">        this.x &#x3D; x;</span><br><span class="line">        this.y &#x3D; y;</span><br><span class="line">    &#125;;</span><br><span class="line">    getX() &#123;</span><br><span class="line">        return this.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let cp &#x3D; new ColorPoint(25, 8);</span><br></pre></td></tr></table></figure><p>编译出来的 <strong>lib/index.js</strong>，如下所示:`</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">require(&quot;core-js&#x2F;modules&#x2F;es.object.define-property&quot;);</span><br><span class="line"></span><br><span class="line">function _classCallCheck(instance, Constructor) &#123; </span><br><span class="line">    if (!(instance instanceof Constructor)) &#123; </span><br><span class="line">    throw new TypeError(&quot;Cannot call a class as a function&quot;); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _defineProperties(target, props) &#123; for (var i &#x3D; 0; i &lt; props.length; i++) &#123; var descriptor &#x3D; props[i]; descriptor.enumerable &#x3D; descriptor.enumerable || false; descriptor.configurable &#x3D; true; if (&quot;value&quot; in descriptor) descriptor.writable &#x3D; true; Object.defineProperty(target, descriptor.key, descriptor); &#125; &#125;</span><br><span class="line"></span><br><span class="line">function _createClass(Constructor, protoProps, staticProps) &#123; if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; &#125;</span><br><span class="line"></span><br><span class="line">var Point &#x3D;</span><br><span class="line">&#x2F;*#__PURE__*&#x2F;</span><br><span class="line">function () &#123;</span><br><span class="line">    function Point(x, y) &#123;</span><br><span class="line">        _classCallCheck(this, Point);</span><br><span class="line">            this.x &#x3D; x;</span><br><span class="line">            this.y &#x3D; y;</span><br><span class="line">        &#125;</span><br><span class="line">        _createClass(Point, [</span><br><span class="line">                &#123;</span><br><span class="line">                    key: &quot;getX&quot;,</span><br><span class="line">                    value: function getX() &#123;</span><br><span class="line">                        return this.x;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        );</span><br><span class="line">        return Point;</span><br><span class="line">    &#125;();</span><br><span class="line">var cp &#x3D; new ColorPoint(25, 8);</span><br></pre></td></tr></table></figure><p>看起来，似乎并没有什么问题，但是你想一下，如果你有10个文件中都使用了这个 class，是不是意味着 <strong>_classCallCheck</strong>、<strong>_defineProperties</strong>、<strong>_createClass</strong> 这些方法被 <strong>inject</strong> 了10次。这显然会导致包体积增大，最关键的是，我们并不需要它 <strong>inject</strong> 多次。</p><p>这个时候，就是 <strong>@babel/plugin-transform-runtime</strong> 插件大显身手的时候了，使用 <strong>@babel/plugin-transform-runtime</strong> 插件，所有帮助程序都将引用模块 <strong>@babel/runtime</strong>，这样就可以避免编译后的代码中出现重复的帮助程序，有效减少包体积。</p><h1 id="babel-plugin-transform-runtime"><a href="#babel-plugin-transform-runtime" class="headerlink" title="@babel/plugin-transform-runtime"></a>@babel/plugin-transform-runtime</h1><p><strong>@babel/plugin-transform-runtime</strong> 是一个可以重复使用 Babel 注入的帮助程序，以节省代码大小的插件。</p><p>另外，<strong>@babel/plugin-transform-runtime</strong> 需要和 <strong>@babel/runtime</strong> 配合使用。</p><p>首先安装依赖，<strong>@babel/plugin-transform-runtime</strong> 通常仅在开发时使用，但是运行时最终代码需要依赖 <strong>@babel/runtime</strong>，所以 <strong>@babel/runtime</strong> 必须要作为生产依赖被安装，如下 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel&#x2F;plugin-transform-runtime</span><br><span class="line">npm install --save @babel&#x2F;runtime</span><br></pre></td></tr></table></figure><p>除了前文所说的，<strong>@babel/plugin-transform-runtime</strong> 可以减少编译后代码的体积外，我们使用它还有一个好处，它可以为代码创建一个沙盒环境，如果使用 <strong>@babel/polyfill</strong> 及其提供的内置程序（例如 Promise ，Set 和 Map ），则它们将污染全局范围。虽然这对于应用程序或命令行工具可能是可以的，但是如果你的代码是要发布供他人使用的库，或者无法完全控制代码运行的环境，则将成为一个问题。<br><strong>@babel/plugin-transform-runtime</strong> 会将这些内置别名作为 <strong>core-js</strong> 的别名，因此您可以无缝使用它们，而无需 <strong>polyfill</strong>。<br>修改 <strong>.babelrc</strong> 的配置，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;.babelrc</span><br><span class="line">&#123;    </span><br><span class="line">    &quot;presets&quot;: </span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            &quot;@babel&#x2F;preset-env&quot;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;useBuiltIns&quot;: &quot;usage&quot;,</span><br><span class="line">                &quot;corejs&quot;: 3</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;: [        </span><br><span class="line">        [            </span><br><span class="line">        &quot;@babel&#x2F;plugin-transform-runtime&quot;        </span><br><span class="line">        ]    </span><br><span class="line">    ]&#125;</span><br></pre></td></tr></table></figure><p>重新编译 <strong>npm run compiler</strong> , 现在，编译出来的内容为(<strong>lib/index.js</strong>):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line">var _interopRequireDefault &#x3D; require(&quot;@babel&#x2F;runtime&#x2F;helpers&#x2F;interopRequireDefault&quot;);</span><br><span class="line"></span><br><span class="line">var _classCallCheck2 &#x3D; _interopRequireDefault(require(&quot;@babel&#x2F;runtime&#x2F;helpers&#x2F;classCallCheck&quot;));</span><br><span class="line"></span><br><span class="line">var _createClass2 &#x3D; _interopRequireDefault(require(&quot;@babel&#x2F;runtime&#x2F;helpers&#x2F;createClass&quot;));</span><br><span class="line">var Point &#x3D;</span><br><span class="line">&#x2F;*#__PURE__*&#x2F;</span><br><span class="line">function () &#123;</span><br><span class="line">    function Point(x, y) &#123;</span><br><span class="line">        (0, _classCallCheck2.default)(this, Point);</span><br><span class="line">                    this.x &#x3D; x;</span><br><span class="line">                    this.y &#x3D; y;</span><br><span class="line">                &#125;</span><br><span class="line">        (0, _createClass2.default)(Point, [&#123;</span><br><span class="line">            key: &quot;getX&quot;,</span><br><span class="line">            value: function getX() &#123;</span><br><span class="line">                return this.x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]);</span><br><span class="line">        return Point;</span><br><span class="line">    &#125;();</span><br><span class="line">    var cp &#x3D; new ColorPoint(25, 8);</span><br></pre></td></tr></table></figure><p>可以看出，帮助函数现在不是直接被 <strong>inject</strong> 到代码中，而是从 <strong>@babel/runtime</strong> 中引入。前文说了使用 <strong>@babel/plugin-transform-runtime</strong> 可以避免全局污染，我们来看看是如何避免污染的。</p><p>修改 <strong>src/index.js</strong> 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let isHas &#x3D; [1,2,3].includes(2);</span><br><span class="line"></span><br><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    resolve(100);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>编译出来的代码如下(<strong>lib/index.js</strong>):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line">require(&quot;core-js&#x2F;modules&#x2F;es.array.includes&quot;);</span><br><span class="line">require(&quot;core-js&#x2F;modules&#x2F;es.object.to-string&quot;);</span><br><span class="line">require(&quot;core-js&#x2F;modules&#x2F;es.promise&quot;);</span><br><span class="line">var isHas &#x3D; [1, 2, 3].includes(2);</span><br><span class="line">new Promise(function (resolve, reject) &#123;    </span><br><span class="line">    resolve(100);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Array.prototype</strong> 上新增了 <strong>includes</strong> 方法，并且新增了全局的 Promise 方法，污染了全局环境，这跟不使用 <strong>@babel/plugin-transform-runtime</strong> 没有区别嘛。</p><p>如果我们希望 <strong>@babel/plugin-transform-runtime</strong> 不仅仅处理帮助函数，同时也能加载 <strong>polyfill</strong> 的话，我们需要给 <strong>@babel/plugin-transform-runtime</strong> 增加配置信息。</p><p>首先新增依赖 <strong>@babel/runtime-corejs3</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel&#x2F;runtime-corejs3 --save</span><br></pre></td></tr></table></figure><p>修改配置文件如下(移除了 <strong>@babel/preset-env</strong> 的 <strong>useBuiltIns</strong> 的配置，不然不就重复了嘛嘛嘛，不信的话，你用 async/await 编译下试试咯):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">    &quot;presets&quot;: [        </span><br><span class="line">        [            </span><br><span class="line">        &quot;@babel&#x2F;preset-env&quot;        </span><br><span class="line">        ]    </span><br><span class="line">    ],    </span><br><span class="line">    &quot;plugins&quot;: [        </span><br><span class="line">        [            </span><br><span class="line">            &quot;@babel&#x2F;plugin-transform-runtime&quot;,</span><br><span class="line">            &#123;                </span><br><span class="line">                &quot;corejs&quot;: 3            </span><br><span class="line">            &#125;        </span><br><span class="line">        ]    </span><br><span class="line">    ]&#125;</span><br></pre></td></tr></table></figure><p>然后重新编译，看一下，编译出来的结果(<strong>lib/index.js</strong>):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line">var _interopRequireDefault &#x3D; require(&quot;@babel&#x2F;runtime-corejs3&#x2F;helpers&#x2F;interopRequireDefault&quot;);</span><br><span class="line"></span><br><span class="line">var _promise &#x3D; _interopRequireDefault(require(&quot;@babel&#x2F;runtime-corejs3&#x2F;core-js-stable&#x2F;promise&quot;));</span><br><span class="line"></span><br><span class="line">var _includes &#x3D; _interopRequireDefault(require(&quot;@babel&#x2F;runtime-corejs3&#x2F;core-js-stable&#x2F;instance&#x2F;includes&quot;));</span><br><span class="line"></span><br><span class="line">var _context;</span><br><span class="line"></span><br><span class="line">var isHas &#x3D; (0, _includes.default)(_context &#x3D; [1, 2, 3]).call(_context, 2);</span><br><span class="line"></span><br><span class="line">new _promise.default(function (resolve, reject) &#123;  </span><br><span class="line">    resolve(100);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看出，没有直接去修改 <strong>Array.prototype</strong>，或者是新增 Promise 方法，避免了全局污染。如果上面 <strong>@babel/plugin-transform-runtime</strong> 配置的 <strong>core-js</strong> 是 “2”，其中不包含实例的 <strong>polyfill</strong> 需要单独引入。</p><blockquote><p>划重点：如果我们配置的 <strong>corejs</strong> 是 3 版本，那么不管是实例方法还是全局方法，都不会再污染全局环境。</p></blockquote><p>看到这里，不知道大家有没有这样一个疑问？给 <strong>@babel/plugin-transform-runtime</strong> 配置 <strong>corejs</strong> 是如此的完美，既可以将帮助函数变成引用的形式，又可以动态引入 <strong>polyfill</strong>，并且不会污染全局环境。何必要给 <strong>@babel/preset-env</strong> 提供 <strong>useBuiltIns</strong> 功能呢，看起来似乎不需要呀。</p><p>带着这样的疑问，我新建了几个文件(内容简单且基本一致，使用了些新特性)，然后使用 <strong>webpack</strong> 构建，以下是我对比的数据:</p><table><thead><tr><th>序号</th><th align="center">.babelrc 配置</th><th align="right">webpack mode production</th></tr></thead><tbody><tr><td>0</td><td align="center">不使用 <strong>@babel/plugin-transform-runtime</strong></td><td align="right">36KB</td></tr><tr><td>1</td><td align="center">使用 <strong>@babel/plugin-transform-runtime</strong> ，并配置参数 <strong>corejs: 3</strong>。不会污染全局环境</td><td align="right">37KB</td></tr><tr><td>2</td><td align="center">使用 <strong>@babel/plugin-transform-runtime</strong> ，不配置 <strong>corejs</strong></td><td align="right">22KB</td></tr></tbody></table><p>我猜测是 <strong>@babel/runtime-corejs3/XXX</strong> 的包本身比 *<em>core-js/modules/XXX *</em>要大一些</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p><strong>@babel/plugin-transform-runtime</strong></p><p><strong>@babel/polyfill</strong></p><p>合理配置Babel配置，使用对应polyfill达到优化的目的</p><p>参考 帖子：<a href="https://juejin.im/post/5ddff3abe51d4502d56bd143#heading-7" target="_blank">刘小夕-不容错过的 Babel7 知识</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
